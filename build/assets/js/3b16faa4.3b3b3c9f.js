"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[2897],{2376:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"technologies/React/Packages/Feather.js/getting-started","title":"Getting Started with Feathers.js","description":"Quick Start","source":"@site/docs/technologies/React/Packages/Feather.js/getting-started.md","sourceDirName":"technologies/React/Packages/Feather.js","slug":"/technologies/React/Packages/Feather.js/getting-started","permalink":"/docs/technologies/React/Packages/Feather.js/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"technologies","previous":{"title":"Easy Peasy Tutorials","permalink":"/docs/technologies/React/Packages/EasyPeasy/tutorials"},"next":{"title":"Getting Started with Formik","permalink":"/docs/technologies/React/Packages/Formik/getting-started"}}');var a=s(4848),i=s(8453);const r={},l="Getting Started with Feathers.js",o={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Installing Feathers",id:"installing-feathers",level:3},{value:"Our first app",id:"our-first-app",level:3},{value:"An API Server",id:"an-api-server",level:3},{value:"In the browser",id:"in-the-browser",level:3},{value:"Creating an App",id:"creating-an-app",level:2},{value:"Generating the Application",id:"generating-the-application",level:3},{value:"Running the server and tests:",id:"running-the-server-and-tests",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Generating Authentication",id:"generating-authentication",level:3},{value:"What&#39;s next?",id:"whats-next",level:3},{value:"Services",id:"services",level:2},{value:"Feathers Services",id:"feathers-services",level:3},{value:"Service Methods",id:"service-methods",level:4},{value:"Service Events",id:"service-events",level:4},{value:"Database Adapters",id:"database-adapters",level:3},{value:"Generating a Service",id:"generating-a-service",level:3},{value:"Hooks",id:"hooks",level:2},{value:"Generating a Hook",id:"generating-a-hook",level:3},{value:"Hook Functions",id:"hook-functions",level:3},{value:"Hook Context",id:"hook-context",level:3},{value:"Registering Hooks",id:"registering-hooks",level:3},{value:"Schemas and Resolvers",id:"schemas-and-resolvers",level:2},{value:"Feather Schemas",id:"feather-schemas",level:3},{value:"Adding a user avatar",id:"adding-a-user-avatar",level:3},{value:"Handling messages",id:"handling-messages",level:3},{value:"Creating a migration",id:"creating-a-migration",level:3},{value:"Logging In",id:"logging-in",level:2},{value:"Registering a user",id:"registering-a-user",level:3},{value:"Logging In",id:"logging-in-1",level:3},{value:"Logging in with Github",id:"logging-in-with-github",level:3},{value:"Extensions",id:"extensions",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"getting-started-with-feathersjs",children:"Getting Started with Feathers.js"})}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Feathers currently works will all active Node.js releases."}),"\n",(0,a.jsx)(n.li,{children:"Since feathers is a node application, create a default package.json using NPM:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm init --yes\n# Install TypeScript and its NodeJS wrapper\nnpm i typescript ts-node @types/node --save-dev\n# Also initialize a TS configuration file that uses modern JavaScript\nnpx tsc --init --target es2020\n"})}),"\n",(0,a.jsx)(n.h3,{id:"installing-feathers",children:"Installing Feathers"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Feathers can be installed via the ",(0,a.jsx)(n.code,{children:"npm"})," command."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm install @feathersjs/feathers --save\n"})}),"\n",(0,a.jsx)(n.h3,{id:"our-first-app",children:"Our first app"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Let's make a simple messages service:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { feathers } from '@feathersjs/feathers'\n\n// This is the interface for the message data\ninterface Message {\n  id?: number\n  text: string\n}\n\n// A messages service that allows us to create new\n// and return all existing messages\nclass MessageService {\n  messages: Message[] = []\n\n  async find() {\n    // Just return all our messages\n    return this.messages\n  }\n\n  async create(data: Pick<Message, 'text'>) {\n    // The new message is the data text with a unique identifier added\n    // using the messages length since it changes whenever we add one\n    const message: Message = {\n      id: this.messages.length,\n      text: data.text\n    }\n\n    // Add new message to the list\n    this.messages.push(message)\n\n    return message\n  }\n}\n\n// This tells TypeScript what services we are registering\ntype ServiceTypes = {\n  messages: MessageService\n}\n\nconst app = feathers<ServiceTypes>()\n\n// Register the message service on the Feathers application\napp.use('messages', new MessageService())\n\n// Log every time a new message has been created\napp.service('messages').on('created', (message: Message) => {\n  console.log('A new message has been created', message)\n})\n\n// A function that creates messages and then logs\n// all existing messages on the service\nconst main = async () => {\n  // Create a new message on our message service\n  await app.service('messages').create({\n    text: 'Hello Feathers'\n  })\n\n  // And another one\n  await app.service('messages').create({\n    text: 'Hello again'\n  })\n\n  // Find all existing messages\n  const messages = await app.service('messages').find()\n\n  console.log('All messages', messages)\n}\n\nmain()\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["To run it, use this command: ",(0,a.jsx)(n.code,{children:"npx ts-node app.ts"})]}),"\n",(0,a.jsxs)(n.li,{children:["Only ",(0,a.jsx)(n.code,{children:"find"})," and ",(0,a.jsx)(n.code,{children:"create"})," are implemented, but the other methods can be implemented as well."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"an-api-server",children:"An API Server"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Feather Transports allows for the created as an API server instead of a simple node.js script."}),"\n",(0,a.jsxs)(n.li,{children:["In the nest example, the following packages are used:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@feathersjs/koa"})," - which uses ",(0,a.jsx)(n.a,{href:"https://koajs.com/",children:"KoaJS"})," to turn the service into a REST Api."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@feathersjs/socketio"})," - Uses Socket.io to do the same functionality as a WebSocket."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Here is the install command:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm install @feathersjs/socketio @feathersjs/koa --save\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The example becomes:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { feathers } from '@feathersjs/feathers'\nimport { koa, rest, bodyParser, errorHandler, serveStatic } from '@feathersjs/koa'\nimport socketio from '@feathersjs/socketio'\n\n// This is the interface for the message data\ninterface Message {\n  id?: number\n  text: string\n}\n\n// A messages service that allows us to create new\n// and return all existing messages\nclass MessageService {\n  messages: Message[] = []\n\n  async find() {\n    // Just return all our messages\n    return this.messages\n  }\n\n  async create(data: Pick<Message, 'text'>) {\n    // The new message is the data text with a unique identifier added\n    // using the messages length since it changes whenever we add one\n    const message: Message = {\n      id: this.messages.length,\n      text: data.text\n    }\n\n    // Add new message to the list\n    this.messages.push(message)\n\n    return message\n  }\n}\n\n// This tells TypeScript what services we are registering\ntype ServiceTypes = {\n  messages: MessageService\n}\n\n// Creates an KoaJS compatible Feathers application\nconst app = koa<ServiceTypes>(feathers())\n\n// Use the current folder for static file hosting\napp.use(serveStatic('.'))\n// Register the error handle\napp.use(errorHandler())\n// Parse JSON request bodies\napp.use(bodyParser())\n\n// Register REST service handler\napp.configure(rest())\n// Configure Socket.io real-time APIs\napp.configure(socketio())\n// Register our messages service\napp.use('messages', new MessageService())\n\n// Add any new real-time connection to the `everybody` channel\napp.on('connection', (connection) => app.channel('everybody').join(connection))\n// Publish all events to the `everybody` channel\napp.publish((_data) => app.channel('everybody'))\n\n// Start the server\napp\n  .listen(3030)\n  .then(() => console.log('Feathers server listening on localhost:3030'))\n\n// For good measure let's create a message\n// So our API doesn't look so empty\napp.service('messages').create({\n  text: 'Hello world from the server'\n})\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["To start the live server: ",(0,a.jsx)(n.code,{children:"npx ts-node app.ts"})," and visit ",(0,a.jsx)(n.code,{children:"http://localhost:<PORT>/messages"})," to see the messages."]}),"\n",(0,a.jsx)(n.li,{children:"The basic setup:"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"in-the-browser",children:"In the browser"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Feathers works the exact same in a web browser."}),"\n",(0,a.jsx)(n.li,{children:"We can create a website that talks to the feathers.js app message service using the real time socket.io connection."}),"\n",(0,a.jsx)(n.li,{children:"Add the following code into an HTML file."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Feathers Example</title>\n    <link href="https://cdn.jsdelivr.net/npm/daisyui@2.46.1/dist/full.css" rel="stylesheet" type="text/css" />\n    <link\n      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2/dist/tailwind.min.css"\n      rel="stylesheet"\n      type="text/css"\n    />\n    <link rel="stylesheet" href="https://feathersjs.com/feathers-chat.css" />\n  </head>\n  <body data-theme="dracula">\n    <main id="main" class="p-8">\n      <h1 class="font-medium leading-tight text-5xl mt-0 mb-2">Welcome to Feathers</h1>\n\n      <div class="form-control w-full py-2">\n        <form class="input-group overflow-hidden" onsubmit="sendMessage(event)">\n          <input name="message" id="message-text" type="text" class="input input-bordered w-full" />\n          <button type="submit" class="btn">Send</button>\n        </form>\n      </div>\n      <h2 class="pt-1 pb-2 text-lg">Messages</h2>\n    </main>\n\n    <script src="//unpkg.com/@feathersjs/client@^5.0.0/dist/feathers.js"><\/script>\n    <script src="/socket.io/socket.io.js"><\/script>\n    <script type="text/javascript">\n      // Set up socket.io\n      const socket = io(\'http://localhost:3030\')\n      // Initialize a Feathers app\n      const app = feathers()\n\n      // Register socket.io to talk to our server\n      app.configure(feathers.socketio(socket))\n\n      // Form submission handler that sends a new message\n      async function sendMessage(event) {\n        const messageInput = document.getElementById(\'message-text\')\n\n        event.preventDefault()\n\n        // Create a new message with the input field value\n        await app.service(\'messages\').create({\n          text: messageInput.value\n        })\n\n        messageInput.value = \'\'\n      }\n\n      // Renders a single message on the page\n      function addMessage(message) {\n        document.getElementById(\'main\').innerHTML += `<div class="chat chat-start">\n          <div class="chat-bubble">${message.text}</div>\n        </div>`\n      }\n\n      const main = async () => {\n        // Find all existing messages\n        const messages = await app.service(\'messages\').find()\n\n        // Add existing messages to the list\n        messages.forEach(addMessage)\n\n        // Add any newly created message to the list in real-time\n        app.service(\'messages\').on(\'created\', addMessage)\n      }\n\n      main()\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"creating-an-app",children:"Creating an App"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The Feathers CLI allows you to start an application with a recommended file structure and some commonly needed features:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Authentication"}),"\n",(0,a.jsx)(n.li,{children:"Database Connections"}),"\n",(0,a.jsx)(n.li,{children:"New Services"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generating-the-application",children:"Generating the Application"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["To generate a new Feathers application, run the following ",(0,a.jsx)(n.code,{children:"npx"})," command:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm create feathers@latest feathers-chat\n"})}),"\n",(0,a.jsx)(n.h3,{id:"running-the-server-and-tests",children:"Running the server and tests:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To run the server:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm run compile\nnpm run migrate\nnpm start\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To run the basic test suite:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"num run test\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To run the dev/watch command:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm run dev\n"})}),"\n",(0,a.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The Feathers CLI makes it really easy to add authentication to your application."}),"\n",(0,a.jsxs)(n.li,{children:["It comes packages with the following auth methods:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"tokens"}),"\n",(0,a.jsx)(n.li,{children:"user credentials"}),"\n",(0,a.jsxs)(n.li,{children:["OAuth-based authentication","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Google, Github, or Twitter"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"JWT Tokens"}),"\n",(0,a.jsxs)(n.li,{children:["Local Authentication","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Normally username and password."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generating-authentication",children:"Generating Authentication"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To add authentication:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npx feathers generate authentication\n"})}),"\n",(0,a.jsx)(n.h3,{id:"whats-next",children:"What's next?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The previous command sets up the following things:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The users service."}),"\n",(0,a.jsx)(n.li,{children:"The ability to store users."}),"\n",(0,a.jsx)(n.li,{children:"An authentication endpoint for logging in."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Services are the main component of Feathers applications."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"feathers-services",children:"Feathers Services"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A service is an object or instance of a class that implements certain methods."}),"\n",(0,a.jsx)(n.li,{children:"It allows for interactions with different kinds of data (and different kinds of databases if needed) in a uniform, protocol-independent way."}),"\n",(0,a.jsxs)(n.li,{children:["Here are some examples of services:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Reading and Writing Data to a supported Database"}),"\n",(0,a.jsx)(n.li,{children:"Interacting with the File System"}),"\n",(0,a.jsx)(n.li,{children:"Calling a Third Party APU/Service, such as stripe, MailGun, or OpenWeatherMap"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"A standard interface allows the application to interact with different services in a uniform manner across multiple transport protocols."}),"\n",(0,a.jsx)(n.li,{children:"Once a service is written, it automatically becomes a rest endpoint that can be called through the web socket."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"service-methods",children:"Service Methods"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Service Methods are any CRUD operation that services implement. Here are the general ones:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"find"})," - Find all data without an id."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"get"})," - Get a single piece of data by an identifier."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"create"})," - Create data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"update"})," - Update data by completely replacing it"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"patch"})," - Update one/more data entries by merging it with new data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"remove"})," - delete"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"setup"})," - Runs when the application has started"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"teardown"})," - Called when the app shuts down."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Here is a basic service instance on a feathers application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { feathers } from '@feathersjs/feathers'\nimport type { Application, Id, NullableId, Params } from '@feathersjs/feathers'\n\nclass MyService {\n  async find(params: Params) {}\n  async get(id: Id, params: Params) {}\n  async create(data: any, params: Params) {}\n  async update(id: NullableId, data: any, params: Params) {}\n  async patch(id: NullableId, data: any, params: Params) {}\n  async remove(id: NullableId, params: Params) {}\n  async setup(path: string, app: Application) {}\n  async teardown(path: string, app: Application) {}\n}\n\nconst app = feathers<{ myservice: MyService }>()\n\napp.use('myservice', new MyService())\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["There are a few params for these service methods:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"id"})," - the identifier for the data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"})," - The Data sent by the user"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"})," - Any additional parameters (Ex: user or query)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["For ",(0,a.jsx)(n.code,{children:"setup"})," and ",(0,a.jsx)(n.code,{children:"teardown"}),", there is","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path"})," - The path the service is registered on."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app"})," - The feathers application."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["You can add your own ",(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/services.html#custom-methods",children:"custom service methods"})," if you wish."]}),"\n",(0,a.jsx)(n.li,{children:"Rule: Services need to have at least one service method to be valid."}),"\n",(0,a.jsxs)(n.li,{children:["When used as a rest API, they are mapped like this:\n",(0,a.jsx)(n.img,{alt:"Feathers API Mapping",src:s(682).A+"",width:"1300",height:"606"})]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"service-events",children:"Service Events"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A registered service automatically becomes a ",(0,a.jsx)(n.a,{href:"https://nodejs.org/api/events.html",children:"NodeJS EventEmitter"})," that sends events with new data when it is modified."]}),"\n",(0,a.jsx)(n.li,{children:"Events can be listened to using:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"app.service('messages').on('eventName', data => {})\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Here is a list of the service methods:\n",(0,a.jsx)(n.img,{alt:"Feathers Events",src:s(241).A+"",width:"680",height:"378"})]}),"\n",(0,a.jsx)(n.li,{children:"This is how feathers allows for real time changes."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"database-adapters",children:"Database Adapters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Feathers has a collection of prebuilt services for different databases."}),"\n",(0,a.jsxs)(n.li,{children:["Out of the box, it supports:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/databases/common",children:"Usage API"})}),"\n",(0,a.jsx)(n.li,{children:"Pagination"}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/databases/querying.html",children:"Querying Syntax"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Feathers-Supported Database Adapters:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"SQL"}),"\n",(0,a.jsx)(n.li,{children:"MongoDB"}),"\n",(0,a.jsx)(n.li,{children:"Memory (In-Memory Data)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generating-a-service",children:"Generating a Service"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To create a backend service:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npx feathers generate service\n"})}),"\n",(0,a.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To provide similar functionality to different services, we can use Hooks."}),"\n",(0,a.jsx)(n.li,{children:"Hooks are pluggable middleware functions that can be registered around, before, after, or on errors of service methods."}),"\n",(0,a.jsx)(n.li,{children:"Hooks are transport independent."}),"\n",(0,a.jsx)(n.li,{children:"Most times, hooks are also service dependent."}),"\n",(0,a.jsxs)(n.li,{children:["Hooks are commonly used to handle","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Validation, Authentication, Logging, Sending Emails, and More."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"generating-a-hook",children:"Generating a Hook"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To Generate a Hook:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"npx feathers generate hook\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"In the example, a hook is made to log the runtime of the application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import type { HookContext, NextFunction } from '../declarations'\nimport { logger } from '../logger'\n\nexport const logRuntime = async (context: HookContext, next: NextFunction) => {\n  const startTime = Date.now()\n  // Run everything else (other hooks and service call)\n  await next()\n\n  const duration = Date.now() - startTime\n  logger.info(`Calling ${context.method} on ${context.path} took ${duration}ms`)\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"await next()"})," allows the rest of the service to run before continuing on."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"hook-functions",children:"Hook Functions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A hook function is an ",(0,a.jsx)(n.code,{children:"async"})," function that takes the ",(0,a.jsx)(n.code,{children:"hook context"})," and a ",(0,a.jsx)(n.code,{children:"next"})," function as a parameter."]}),"\n",(0,a.jsxs)(n.li,{children:["If the hook runs on error, before, or after the service method, it does not need the ",(0,a.jsx)(n.code,{children:"next"})," function."]}),"\n",(0,a.jsx)(n.li,{children:"Hooks run in the order they are registered."}),"\n",(0,a.jsx)(n.li,{children:"If a hook throws an error, all of the remaining hooks will not function."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"hook-context",children:"Hook Context"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The Hook Context is an object that contains the information given to the service method call."}),"\n",(0,a.jsx)(n.li,{children:"It has read-only and writable properties."}),"\n",(0,a.jsxs)(n.li,{children:["The Read-Only Properties:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.app"})," - The Feathers application object. Normally used to call other services."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.service"})," - The service object this hook is currently running on."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.path"})," - The path (name) of the service."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.method"})," - The name of the service method being called."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.type"})," - The hook type (around, before, etc)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["The Writable Properties:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.params"})," - The service call method params.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For external calls, it normally contains:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.params.query"})," - The Query Filter (e.g. from the REST query string)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.params.provider"})," - The name of the transport the call was made through."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.params.user"})," - If authenticated, the data of the user."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.id"})," - The ID of the record (if applicable)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.data"})," - The ",(0,a.jsx)(n.code,{children:"data"})," sent in by the user (if applicable)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.error"})," - The error that was thrown (For error hooks)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"context.result"})," - The result of the method call (Only available after ",(0,a.jsx)(n.code,{children:"await next()"})," or in ",(0,a.jsx)(n.code,{children:"after"})," hooks.)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"registering-hooks",children:"Registering Hooks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Hooks are registered in the service file."}),"\n",(0,a.jsxs)(n.li,{children:["The hooks registration call is an object with ",(0,a.jsx)(n.code,{children:"{ around, before, after, error }"})," and a list of hooks per method like ",(0,a.jsx)(n.code,{children:"{ all: [], find: [], create: [] }"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"To add the logRuntime hook:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// For more information about this file see https://dove.feathersjs.com/guides/cli/service.html\nimport { authenticate } from '@feathersjs/authentication'\n\nimport { hooks as schemaHooks } from '@feathersjs/schema'\n\nimport {\n  messageDataValidator,\n  messagePatchValidator,\n  messageQueryValidator,\n  messageResolver,\n  messageExternalResolver,\n  messageDataResolver,\n  messagePatchResolver,\n  messageQueryResolver\n} from './messages.schema'\n\nimport type { Application } from '../../declarations'\nimport { MessageService, getOptions } from './messages.class'\nimport { messagePath, messageMethods } from './messages.shared'\nimport { logRuntime } from '../../hooks/log-runtime'\n\nexport * from './messages.class'\nexport * from './messages.schema'\n\n// A configure function that registers the service and its hooks via `app.configure`\nexport const message = (app: Application) => {\n  // Register our service on the Feathers application\n  app.use(messagePath, new MessageService(getOptions(app)), {\n    // A list of all methods this service exposes externally\n    methods: messageMethods,\n    // You can add additional custom events to be sent to clients here\n    events: []\n  })\n  // Initialize hooks\n  app.service(messagePath).hooks({\n    around: {\n      all: [\n        logRuntime,\n        authenticate('jwt'),\n        schemaHooks.resolveExternal(messageExternalResolver),\n        schemaHooks.resolveResult(messageResolver)\n      ]\n    },\n    before: {\n      all: [schemaHooks.validateQuery(messageQueryValidator), schemaHooks.resolveQuery(messageQueryResolver)],\n      find: [],\n      get: [],\n      create: [schemaHooks.validateData(messageDataValidator), schemaHooks.resolveData(messageDataResolver)],\n      patch: [schemaHooks.validateData(messagePatchValidator), schemaHooks.resolveData(messagePatchResolver)],\n      remove: []\n    },\n    after: {\n      all: []\n    },\n    error: {\n      all: []\n    }\n  })\n}\n\n// Add this service to the service type index\ndeclare module '../../declarations' {\n  interface ServiceTypes {\n    [messagePath]: MessageService\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"schemas-and-resolvers",children:"Schemas and Resolvers"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Schemas and Resolvers are used to define, validate, and secure our data model and types."}),"\n",(0,a.jsx)(n.li,{children:"They are also used to modify data in the hook context (if needed)"}),"\n",(0,a.jsxs)(n.li,{children:["Schemas and Resolvers come in two main parts:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/schema/typebox.html",children:"Typebox"})," or ",(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/schema/schema.html",children:"JSON Schema"})," to define a schema. It can:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ensure data is validated and in the right format."}),"\n",(0,a.jsx)(n.li,{children:"Automatically get up to date TypeScript types from schema definitions."}),"\n",(0,a.jsx)(n.li,{children:"Create a typed client that can be used in React, Vue, and other types of applications."}),"\n",(0,a.jsx)(n.li,{children:"Automatically generate API Documentation."}),"\n",(0,a.jsx)(n.li,{children:"Validate query string filters and convert them into the correct types."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://feathersjs.com/api/schema/resolvers.html",children:"Resolvers"})," - Resolve schema properties based on a context (normally hook context). It can be used for:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Populating associations"}),"\n",(0,a.jsx)(n.li,{children:"Securing queries and limiting the types of requests the logged in user can perform."}),"\n",(0,a.jsx)(n.li,{children:"Safely hiding sensitive data for external clients."}),"\n",(0,a.jsx)(n.li,{children:"Adding read and write permissions on a property field level."}),"\n",(0,a.jsx)(n.li,{children:"Hashing passwords and validating dynamic password policies."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"feather-schemas",children:"Feather Schemas"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Schemas and Validators come in four different kinds:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Result - define the data that is returned. Associated data can also be fetched here."}),"\n",(0,a.jsxs)(n.li,{children:["Data - handle data from a ",(0,a.jsx)(n.code,{children:"create"}),", ",(0,a.jsx)(n.code,{children:"update"}),", ",(0,a.jsx)(n.code,{children:"patch"}),", or custom service method and can add/replace things like default values (like created_at, updated_at) before being saved."]}),"\n",(0,a.jsx)(n.li,{children:"Query - validate and convert the query string and can also be used for additional limitations like only allowing a user to see and modify their own data."}),"\n",(0,a.jsx)(n.li,{children:"External - Return a safe version of the data (hiding a user's password), that can be sent out to clients."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"adding-a-user-avatar",children:"Adding a user avatar"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"In the example, lets add an avatar property to allow for profile pictures."}),"\n",(0,a.jsxs)(n.li,{children:["Updating ",(0,a.jsx)(n.code,{children:"user.schema.ts"}),":"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// For more information about this file see https://dove.feathersjs.com/guides/cli/service.schemas.html\nimport crypto from 'crypto'\nimport { resolve } from '@feathersjs/schema'\nimport { Type, getValidator, querySyntax } from '@feathersjs/typebox'\nimport type { Static } from '@feathersjs/typebox'\nimport { passwordHash } from '@feathersjs/authentication-local'\n\nimport type { HookContext } from '../../declarations'\nimport { dataValidator, queryValidator } from '../../validators'\n\n// Main data model schema\nexport const userSchema = Type.Object(\n  {\n    id: Type.Number(),\n    email: Type.String(),\n    password: Type.Optional(Type.String()),\n    githubId: Type.Optional(Type.Number()),\n    avatar: Type.Optional(Type.String())\n  },\n  { $id: 'User', additionalProperties: false }\n)\nexport type User = Static<typeof userSchema>\nexport const userValidator = getValidator(userSchema, dataValidator)\nexport const userResolver = resolve<User, HookContext>({})\n\nexport const userExternalResolver = resolve<User, HookContext>({\n  // The password should never be visible externally\n  password: async () => undefined\n})\n\n// Schema for creating new users\nexport const userDataSchema = Type.Pick(\n  userSchema,\n  ['email', 'password', 'githubId', 'avatar'],\n  {\n    $id: 'UserData',\n    additionalProperties: false\n  }\n)\nexport type UserData = Static<typeof userDataSchema>\nexport const userDataValidator = getValidator(userDataSchema, dataValidator)\nexport const userDataResolver = resolve<User, HookContext>({\n  password: passwordHash({ strategy: 'local' }),\n  avatar: async (value, user) => {\n    // If the user passed an avatar image, use it\n    if (value !== undefined) {\n      return value\n    }\n\n    // Gravatar uses MD5 hashes from an email address to get the image\n    const hash = crypto.createHash('md5').update(user.email.toLowerCase()).digest('hex')\n    // Return the full avatar URL\n    return `https://s.gravatar.com/avatar/${hash}?s=60`\n  }\n})\n\n// Schema for updating existing users\nexport const userPatchSchema = Type.Partial(userSchema, {\n  $id: 'UserPatch'\n})\nexport type UserPatch = Static<typeof userPatchSchema>\nexport const userPatchValidator = getValidator(userPatchSchema, dataValidator)\nexport const userPatchResolver = resolve<User, HookContext>({\n  password: passwordHash({ strategy: 'local' })\n})\n\n// Schema for allowed query properties\nexport const userQueryProperties = Type.Pick(userSchema, ['id', 'email', 'githubId'])\nexport const userQuerySchema = Type.Intersect(\n  [\n    querySyntax(userQueryProperties),\n    // Add additional query properties here\n    Type.Object({}, { additionalProperties: false })\n  ],\n  { additionalProperties: false }\n)\nexport type UserQuery = Static<typeof userQuerySchema>\nexport const userQueryValidator = getValidator(userQuerySchema, queryValidator)\nexport const userQueryResolver = resolve<UserQuery, HookContext>({\n  // If there is a user (e.g. with authentication), they are only allowed to see their own data\n  id: async (value, user, context) => {\n    // We want to be able to get a list of all users but\n    // only let a user modify their own data otherwise\n    if (context.params.user && context.method !== 'find') {\n      return context.params.user.id\n    }\n\n    return value\n  }\n})\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["What changed?","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A ",(0,a.jsx)(n.code,{children:"avatar"})," field was added to the user object."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"userDataSchema"})," is updated to include the ",(0,a.jsx)(n.code,{children:"avatar"})]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"userDataResolver"})," sets a default image if an image wasn't included."]}),"\n",(0,a.jsxs)(n.li,{children:["THe ",(0,a.jsx)(n.code,{children:"userQueryResolver"})," for the user id property allows them to ",(0,a.jsx)(n.code,{children:"find"})," all other users but only change their own data."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"handling-messages",children:"Handling messages"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To include the data, the id of the user that sent the message, and populate the user with the user data."}),"\n",(0,a.jsxs)(n.li,{children:["Updating the ",(0,a.jsx)(n.code,{children:"messages.schema.ts"})," file:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// For more information about this file see https://dove.feathersjs.com/guides/cli/service.schemas.html\nimport { resolve, virtual } from '@feathersjs/schema'\nimport { Type, getValidator, querySyntax } from '@feathersjs/typebox'\nimport type { Static } from '@feathersjs/typebox'\n\nimport type { HookContext } from '../../declarations'\nimport { dataValidator, queryValidator } from '../../validators'\nimport { userSchema } from '../users/users.schema'\n\n// Main data model schema\nexport const messageSchema = Type.Object(\n  {\n    id: Type.Number(),\n    text: Type.String(),\n    createdAt: Type.Number(),\n    userId: Type.Number(),\n    user: Type.Ref(userSchema)\n  },\n  { $id: 'Message', additionalProperties: false }\n)\nexport type Message = Static<typeof messageSchema>\nexport const messageValidator = getValidator(messageSchema, dataValidator)\nexport const messageResolver = resolve<Message, HookContext>({\n  user: virtual(async (message, context) => {\n    // Associate the user that sent the message\n    return context.app.service('users').get(message.userId)\n  })\n})\n\nexport const messageExternalResolver = resolve<Message, HookContext>({})\n\n// Schema for creating new entries\nexport const messageDataSchema = Type.Pick(messageSchema, ['text'], {\n  $id: 'MessageData'\n})\nexport type MessageData = Static<typeof messageDataSchema>\nexport const messageDataValidator = getValidator(messageDataSchema, dataValidator)\nexport const messageDataResolver = resolve<Message, HookContext>({\n  userId: async (_value, _message, context) => {\n    // Associate the record with the id of the authenticated user\n    return context.params.user.id\n  },\n  createdAt: async () => {\n    return Date.now()\n  }\n})\n\n// Schema for updating existing entries\nexport const messagePatchSchema = Type.Partial(messageSchema, {\n  $id: 'MessagePatch'\n})\nexport type MessagePatch = Static<typeof messagePatchSchema>\nexport const messagePatchValidator = getValidator(messagePatchSchema, dataValidator)\nexport const messagePatchResolver = resolve<Message, HookContext>({})\n\n// Schema for allowed query properties\nexport const messageQueryProperties = Type.Pick(messageSchema,[\n  'id',\n  'text',\n  'createdAt',\n  'userId'\n])\nexport const messageQuerySchema = Type.Intersect(\n  [\n    querySyntax(messageQueryProperties),\n    // Add additional query properties here\n    Type.Object({}, { additionalProperties: false })\n  ],\n  { additionalProperties: false }\n)\nexport type MessageQuery = Static<typeof messageQuerySchema>\nexport const messageQueryValidator = getValidator(messageQuerySchema, queryValidator)\nexport const messageQueryResolver = resolve<MessageQuery, HookContext>({\n  userId: async (value, user, context) => {\n    // We want to be able to find all messages but\n    // only let a user modify their own messages otherwise\n    if (context.params.user && context.method !== 'find') {\n      return context.params.user.id\n    }\n\n    return value\n  }\n})\n"})}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-migration",children:"Creating a migration"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"SQL databases can be modified using migrations (How Laravel and RevenueCloudFX does it)."}),"\n",(0,a.jsxs)(n.li,{children:["Each database service will create a migration that adds an ",(0,a.jsx)(n.code,{children:"id"})," field and a ",(0,a.jsx)(n.code,{children:"text"})," property."]}),"\n",(0,a.jsx)(n.li,{children:"To create a migration:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm run migrate:make -- chat\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"After updating it for the chat functionality."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import type { Knex } from 'knex'\n\nexport async function up(knex: Knex): Promise<void> {\n  await knex.schema.alterTable('users', (table) => {\n    table.string('avatar')\n  })\n\n  await knex.schema.alterTable('messages', (table) => {\n    table.bigint('createdAt')\n    table.bigint('userId').references('id').inTable('users')\n  })\n}\n\nexport async function down(knex: Knex): Promise<void> {\n  await knex.schema.alterTable('users', (table) => {\n    table.dropColumn('avatar')\n  })\n\n  await knex.schema.alterTable('messages', (table) => {\n    table.dropColumn('createdAt')\n    table.dropColumn('userId')\n  })\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To run the migration:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm run migrate\n"})}),"\n",(0,a.jsx)(n.h2,{id:"logging-in",children:"Logging In"}),"\n",(0,a.jsx)(n.h3,{id:"registering-a-user",children:"Registering a user"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The HTTP Rest API can be used to register new users."}),"\n",(0,a.jsxs)(n.li,{children:["This can be done by sending a POST request to ",(0,a.jsx)(n.code,{children:"http://localhost:<PORT>/users"})," with JSON data structured like this:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// POST /users\n{\n  "email": "hello@feathersjs.com",\n  "password": "supersecret"\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Which will return:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "id": 123,\n  "email": "hello@feathersjs.com",\n  "avatar": "https://s.gravatar.com/avatar/ffe2a09df37d7c646e974a2d2b8d3e03?s=60"\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Note: The password will be hashed and stored in the database, but will never be included in an external response."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"logging-in-1",children:"Logging In"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["By default, feathers uses ",(0,a.jsx)(n.a,{href:"https://jwt.io/",children:"JSON Web Tokens"})," for authentication. The access token is issued by the feathers server by default and is sent in every single API request."]}),"\n",(0,a.jsx)(n.li,{children:"Usually, the token is issued for each specific user."}),"\n",(0,a.jsx)(n.li,{children:"Tokens are created by sending a POST request to the /authentication endpoint."}),"\n",(0,a.jsx)(n.li,{children:"You must pass the authentication strategy along with any other relevant data."}),"\n",(0,a.jsx)(n.li,{children:"For a JWT request, you can use a local strategy:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// POST /authentication\n{\n  "strategy": "local",\n  "email": "hello@feathersjs.com",\n  "password": "supersecret"\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Which will return something like:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "accessToken": "<JWT for this user>",\n  "authentication": {\n    "strategy": "local"\n  },\n  "user": {\n    "id": 123,\n    "email": "hello@feathersjs.com",\n    "avatar": "https://s.gravatar.com/avatar/ffe2a09df37d7c646e974a2d2b8d3e03?s=60"\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The access token can then be used to authenticate using the ",(0,a.jsx)(n.code,{children:"Authorization: Bearer <accessToken>"})," HTTP header."]}),"\n",(0,a.jsx)(n.li,{children:"For example:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"curl 'http://localhost:3030/messages/' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <accessToken>' \\\n  --data-binary '{ \"text\": \"Hello from the console\" }'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"logging-in-with-github",children:"Logging in with Github"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The authentication flow is very similar to the username and password flow."}),"\n",(0,a.jsx)(n.li,{children:"Feathers will automatically direct the user to login with the Oauth provider."}),"\n",(0,a.jsx)(n.li,{children:"Feathers will find or create the user in the users service and issue a new token for them."}),"\n",(0,a.jsxs)(n.li,{children:["To allow for Github Oauth, a ",(0,a.jsx)(n.a,{href:"https://github.com/settings/applications/new",children:"new Oauth application"})," must be made.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Set the callback to ",(0,a.jsx)(n.code,{children:"http://localhost:3030/oauth/github/callback"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Then, update the ",(0,a.jsx)(n.code,{children:"authentication"})," section in ",(0,a.jsx)(n.code,{children:"config/default.json"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["When using Oauth, you may need to modify the ",(0,a.jsx)(n.code,{children:"authentication.ts"})," file."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import type { Params } from '@feathersjs/feathers'\nimport { AuthenticationService, JWTStrategy } from '@feathersjs/authentication'\nimport { LocalStrategy } from '@feathersjs/authentication-local'\nimport { oauth, OAuthStrategy } from '@feathersjs/authentication-oauth'\nimport type { OAuthProfile } from '@feathersjs/authentication-oauth'\nimport type { Application } from './declarations'\n\ndeclare module './declarations' {\n  interface ServiceTypes {\n    authentication: AuthenticationService\n  }\n}\n\nclass GitHubStrategy extends OAuthStrategy {\n  async getEntityData(profile: OAuthProfile, existing: any, params: Params) {\n    const baseData = await super.getEntityData(profile, existing, params)\n\n    return {\n      ...baseData,\n      // The GitHub profile image\n      avatar: profile.avatar_url,\n      // The user email address (if available)\n      email: profile.email\n    }\n  }\n}\n\nexport const authentication = (app: Application) => {\n  const authentication = new AuthenticationService(app)\n\n  authentication.register('jwt', new JWTStrategy())\n  authentication.register('local', new LocalStrategy())\n  authentication.register('github', new GitHubStrategy())\n\n  app.use('authentication', authentication)\n  app.configure(oauth())\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"extensions",children:"Extensions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["There are a ton of ",(0,a.jsx)(n.a,{href:"https://hooks-common.feathersjs.com/hooks.html",children:"common feather hooks"})," in this package."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},241:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/feathers-events-baed906c9816be5679e0e777b09103bf.png"},682:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/feathers-rest-api-mapping-72678e3c425416e6953af0b39a83bccc.png"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);