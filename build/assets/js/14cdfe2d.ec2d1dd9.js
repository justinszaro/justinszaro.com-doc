"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[7628],{7186:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"technologies/Javascript/New Javascript ES6 Features","title":"ES6 - New Javascript Features","description":"Compare Scopes of Var and Let Keywords","source":"@site/docs/technologies/Javascript/es6-features.md","sourceDirName":"technologies/Javascript","slug":"/technologies/Javascript/New Javascript ES6 Features","permalink":"/docs/technologies/Javascript/New Javascript ES6 Features","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"javascript","permalink":"/docs/tags/javascript"},{"inline":true,"label":"es6","permalink":"/docs/tags/es-6"}],"version":"current","frontMatter":{"id":"New Javascript ES6 Features","tags":["javascript","es6"]},"sidebar":"technologies","previous":{"title":"jQuery Methods","permalink":"/docs/technologies/Javascript/Packages/jQuery"},"next":{"title":"Javascript Introduction","permalink":"/docs/technologies/Javascript/Javascript Introduction"}}');var t=s(4848),a=s(8453);const i={id:"New Javascript ES6 Features",tags:["javascript","es6"]},o="ES6 - New Javascript Features",l={},c=[{value:"Compare Scopes of Var and Let Keywords",id:"compare-scopes-of-var-and-let-keywords",level:4},{value:"Mutating arrays declared with const",id:"mutating-arrays-declared-with-const",level:4},{value:"Using Arrow Functions to Write Concise Anonymous Functions",id:"using-arrow-functions-to-write-concise-anonymous-functions",level:4},{value:"Using the rest parameter for functions",id:"using-the-rest-parameter-for-functions",level:4},{value:"Use the Spread Operator to Evaluate Arrays In-Place",id:"use-the-spread-operator-to-evaluate-arrays-in-place",level:4},{value:"Use Destructuring Assignment to Extract Values from Objects",id:"use-destructuring-assignment-to-extract-values-from-objects",level:4},{value:"Use Destructuring Assignment to Assign Variables from Arrays",id:"use-destructuring-assignment-to-assign-variables-from-arrays",level:4},{value:"Use Destructuring Assignment to Pass an Object as a Function&#39;s Parameters",id:"use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters",level:4},{value:"Using Template Literals",id:"using-template-literals",level:4},{value:"Writing concise object literal declarations using object property shorthand",id:"writing-concise-object-literal-declarations-using-object-property-shorthand",level:4},{value:"Writing Consise Declarative Functions with ES6",id:"writing-consise-declarative-functions-with-es6",level:4},{value:"Use class Syntax to Define a Constructor Function",id:"use-class-syntax-to-define-a-constructor-function",level:4},{value:"Getters and Setters to Control Access to an Object",id:"getters-and-setters-to-control-access-to-an-object",level:4},{value:"Using export to share a code block",id:"using-export-to-share-a-code-block",level:4},{value:"Reuse Javascript using Import",id:"reuse-javascript-using-import",level:4},{value:"Javascript Promises",id:"javascript-promises",level:4}];function d(e){const n={code:"code",h1:"h1",h4:"h4",header:"header",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"es6---new-javascript-features",children:"ES6 - New Javascript Features"})}),"\n",(0,t.jsx)(n.h4,{id:"compare-scopes-of-var-and-let-keywords",children:"Compare Scopes of Var and Let Keywords"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"var"})," is a keyword that is declared globally. Its scope is local if it is declared within a function."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"let"})," is a keyword that limits its scope to a block, statement, or expression.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For this reason, ",(0,t.jsx)(n.code,{children:"let"})," is a much better choice for variables that are constrained to for and while loops. This way the variable can be reused in the future."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mutating-arrays-declared-with-const",children:"Mutating arrays declared with const"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"const"})," is used to define variables that will not be changed again.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Exception: objects (including arrays and functions) assigned to a variable using const are stull mutable."}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"const"})," declaration only prevents the reassignment of the variable."]}),"\n",(0,t.jsxs)(n.li,{children:["To prevent objects from mutating, you can use the ",(0,t.jsx)(n.code,{children:"Object.freeze()"})," method."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();\nObject.freeze(s);\neditInPlace(); // Will fail and throw an error\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-arrow-functions-to-write-concise-anonymous-functions",children:"Using Arrow Functions to Write Concise Anonymous Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If a function is only being used as an arguement to another function, it is often easier to leave these unamed and inline:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const myFunc = function() {\n    const myVar = "value";\n    return myVar;\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Arrow functions can be used instead of making a name for the variable:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const myFunc = () => {\n    const myVar = "value";\n    return myVar;\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Smaller functions with only a return value can omit the curly braces and the return statement entirely:\n",(0,t.jsx)(n.code,{children:'const myFunc = () => "value"'})]}),"\n",(0,t.jsx)(n.li,{children:"Arrow functions also allow for parameters to pass through them, making them very useful for broader functions."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const doubler = (item) => item * 2;\ndoubler(4); // Would return 8\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Any functions with a single parameter can omit the parenthesis:\n",(0,t.jsx)(n.code,{children:"const doubler = item => item * 2;"})]}),"\n",(0,t.jsx)(n.li,{children:"Multiple values are also allowed:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const multiplier = (item, multi) => item * multi;\nmultiplier(2, 4); // Would return 8\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Default parameters can also be set for arrow functions"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const greeting = (name = "Anonymous") => "Hello " + name;\n\nconsole.log(greeting("John"));\nconsole.log(greeting());\n'})}),"\n",(0,t.jsx)(n.h4,{id:"using-the-rest-parameter-for-functions",children:"Using the rest parameter for functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["With the new rest parameter (",(0,t.jsx)(n.code,{children:"...args"}),"), you can pass any number of variables into a function"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function howMany(...args) {\n  return "You have passed " + args.length + " arguments.";\n}\nconsole.log(howMany(0, 1, 2)); // You have passed 3 arguements.\nconsole.log(howMany("string", null, [1, 2, 3], { })); // You have passed 4 arguements\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This could be good for mathematical functions, but may not be super clear and readible for a team of developers."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"use-the-spread-operator-to-evaluate-arrays-in-place",children:"Use the Spread Operator to Evaluate Arrays In-Place"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The spread operator allows for arrays to be expanded and in place where multiple parameters and elements are expected."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr);\nconsole.log(maximus); // Would have a value of 89\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"null"})," in the previous example is needed because the ",(0,t.jsx)(n.code,{children:"apply()"})," function expects multiple different parameters. This syntax can be avoided using the spread operator:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(...arr);\nconsole.log(maximus); // Would have a value of 89\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The spread operator only works in place and connot be used as a value of a new variable."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"use-destructuring-assignment-to-extract-values-from-objects",children:"Use Destructuring Assignment to Extract Values from Objects"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Destructuring assignment allows for you to assign multiple values in an object:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const user = { name: 'John Doe', age: 34 };\n\n//const name = user.name;\n//const age = user.age;\nconst {name, age} = user\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can extract fewer values if you wish."}),"\n",(0,t.jsx)(n.li,{children:"You can assign the new variables a new name if you wish using the same object-like syntax:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const user = { name: 'John Doe', age: 34 };\nconst { name: userName, age: userAge } = user;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Objects within objects can also be deconstructed in the same way:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const user = {\n  johnDoe: { \n    age: 34,\n    email: 'johnDoe@freeCodeCamp.com'\n  }\n};\n\nconst { johnDoe: { age: userAge, email: userEmail }} = user;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"use-destructuring-assignment-to-assign-variables-from-arrays",children:"Use Destructuring Assignment to Assign Variables from Arrays"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can also use deconstruction assignment to deconstruct arrays:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const [a, b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b); // a=1 and b=2\n\nconst [a, b,,, c] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c); // a=1 and b=2 c=5\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can also deconstruct using the rest element."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b); // 1, 2\nconsole.log(arr); // [3, 4, 5, 7]\n"})}),"\n",(0,t.jsx)(n.h4,{id:"use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters",children:"Use Destructuring Assignment to Pass an Object as a Function's Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can also deconstruct an object in a functions parameters."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const profileUpdate = (profileData) => {\n  const { name, age, nationality, location } = profileData;\n}\n// Can become\nconst profileUpdate = ({ name, age, nationality, location }) => {\n\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-template-literals",children:"Using Template Literals"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Template literals can now be used within javascript to include variables in strings."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const person = {\n  name: "Zodiac Hasbro",\n  age: 56\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting); //Hello, my name is Zodiac Hasbro. I am 56 years old.\n'})}),"\n",(0,t.jsx)(n.h4,{id:"writing-concise-object-literal-declarations-using-object-property-shorthand",children:"Writing concise object literal declarations using object property shorthand"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can also easily define object literals using Object Property Shorthands:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const getMousePosition = (x, y) => ({\n  x: x,\n  y: y\n});\n// OR\nconst getMousePosition = (x, y) => ({ x, y });\n"})}),"\n",(0,t.jsx)(n.h4,{id:"writing-consise-declarative-functions-with-es6",children:"Writing Consise Declarative Functions with ES6"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When defining functions within objects, you had to include the function keyword. ES6 allows you to skip it all together."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const person = {\n  name: "Taylor",\n  sayHello() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\nconsole.log(person.sayHello()); // Hello! My name is Taylor.\n'})}),"\n",(0,t.jsx)(n.h4,{id:"use-class-syntax-to-define-a-constructor-function",children:"Use class Syntax to Define a Constructor Function"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["ES5 required an objects creation to be handled by a constructor function and the ",(0,t.jsx)(n.code,{children:"new"})," keyword."]}),"\n",(0,t.jsxs)(n.li,{children:["In ES6, a ",(0,t.jsx)(n.code,{children:"class"})," declaration can also have a constructor method that is invoked with the ",(0,t.jsx)(n.code,{children:"new"})," keyword. If the constructor methid is not defined, it is implicitly defined with no arguements."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// Explicit constructor\nclass SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n  takeOff() {\n    console.log("To " + this.targetPlanet + "!");\n  }\n}\n\n// Implicit constructor \nclass Rocket {\n  launch() {\n    console.log("To the moon!");\n  }\n}\n\nconst zeus = new SpaceShuttle(\'Jupiter\');\n// prints To Jupiter! in console\nzeus.takeOff();\n\nconst atlas = new Rocket();\n// prints To the moon! in console\natlas.launch();\n'})}),"\n",(0,t.jsx)(n.h4,{id:"getters-and-setters-to-control-access-to-an-object",children:"Getters and Setters to Control Access to an Object"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When using private variables (prefixed with the ",(0,t.jsx)(n.code,{children:"_"}),"), getters and setters must be used accessing/setting the variable. This is very similar to Java OOP"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class Book {\n  constructor(author) {\n    this._author = author;\n  }\n  // getter\n  get writer() {\n    return this._author;\n  }\n  // setter\n  set writer(updatedAuthor) {\n    this._author = updatedAuthor;\n  }\n}\nconst novel = new Book('anonymous');\nconsole.log(novel.writer);\nnovel.writer = 'newAuthor';\nconsole.log(novel.writer);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-export-to-share-a-code-block",children:"Using export to share a code block"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can export code blocks to be used by other JavaScript files."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const add = (x, y) => {\n  return x + y;\n}\n// OR\nconst add = (x, y) => {\n  return x + y;\n}\n\nexport { add };\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You can also export multiple functions at once:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["EX: ",(0,t.jsx)(n.code,{children:"export {add, subtract};"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"reuse-javascript-using-import",children:"Reuse Javascript using Import"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Code can also be imported from other files using the ",(0,t.jsx)(n.code,{children:"import"})," keyword. Multiple functions can be imported from the same file.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["EX: ",(0,t.jsx)(n.code,{children:" import { add, subtract } from './math_functions.js';"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["All of the contents can also be imported using the ",(0,t.jsx)(n.code,{children:"*"})," wildcard.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["EX: ",(0,t.jsx)(n.code,{children:"import * as myMathModule from './math_functions'"})]}),"\n",(0,t.jsx)(n.li,{children:"Any functions or variables that are neccessary can be accessed like a JavaScript Object."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"javascript-promises",children:"Javascript Promises"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A promise states that you will do something, usually asyncronously."}),"\n",(0,t.jsx)(n.li,{children:"When the task is finished, you either completed or failed to complete the promise."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Promise"})," is a constructor function, so you need to use the ",(0,t.jsx)(n.code,{children:"new"})," keyword to create one."]}),"\n",(0,t.jsxs)(n.li,{children:["It takes two parameters: ",(0,t.jsx)(n.code,{children:"resolve"})," and ",(0,t.jsx)(n.code,{children:"reject"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const myPromise = new Promise((resolve, reject) => {\n\n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Promises have three states, pending, fulfilled, and rejected. Promises will forever remain in the pending state unless you give a way to complete the promise.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"resolve"})," keyword is used when you want your promise to succeed."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"reject"})," keyword is when you want your promise to fail."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const myPromise = new Promise((resolve, reject) => {\n  if(condition here) {\n    resolve("Promise was fulfilled");\n  } else {\n    reject("Promise was rejected");\n  }\n});\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Promises are increadibly useful when you have a process that takes an unknown amount of time, such as an API call or Database Query."}),"\n",(0,t.jsxs)(n.li,{children:["Once it completes you normally want to do something with the results. This can be done using the ",(0,t.jsx)(n.code,{children:"then"})," method. The ",(0,t.jsx)(n.code,{children:"then"})," method is run as soon as the resolve method is triggered."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"myPromise.then(result => {\n  \n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Rejections can be handled using the ",(0,t.jsx)(n.code,{children:"catch"})," function (similar to a try catch block.) This is triggered as soon as the promise is rejected."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"myPromise.catch(error => {\n  \n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);