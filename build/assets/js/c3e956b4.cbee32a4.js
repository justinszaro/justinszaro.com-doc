"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[8944],{2580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"technologies/PHP/CRUD Operations","title":"CRUD Operations","description":"What is CRUD?:","source":"@site/docs/technologies/PHP/crud-operations.md","sourceDirName":"technologies/PHP","slug":"/technologies/PHP/CRUD Operations","permalink":"/docs/technologies/PHP/CRUD Operations","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"php","permalink":"/docs/tags/php"},{"inline":true,"label":"mysql","permalink":"/docs/tags/mysql"}],"version":"current","frontMatter":{"id":"CRUD Operations","tags":["php","mysql"]},"sidebar":"technologies","previous":{"title":"Browser Persistent Data","permalink":"/docs/technologies/PHP/Browser Persistent Data"},"next":{"title":"PHP File Handling","permalink":"/docs/technologies/PHP/PHP File Handling"}}');var s=t(4848),l=t(8453);const a={id:"CRUD Operations",tags:["php","mysql"]},r=void 0,o={},c=[];function d(e){const n={li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"What is CRUD?:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CRUD - Create, remove, update, delete."}),"\n",(0,s.jsx)(n.li,{children:"CRUD is everything you would want to do in a database for an application."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Connecting to the Database"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PHP\u2019s Data Object, or PDO, connects the application to the database."}),"\n",(0,s.jsxs)(n.li,{children:["You can create a new PDO object by performing","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"$db = new PDO();"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"You use the PDO_SQLITE_DSN for connecting to SQLite databases"}),"\n",(0,s.jsxs)(n.li,{children:["To connect to a database on disk, you add the absolute path to the database.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'$db = new PDO("sqlite:".__DIR__."/database.db");'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Be sure to handle the case if the connection to the database cannot be established."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Handling Exceptions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Remember that exceptions are exceptional, they should not occur for something that you expect to happen."}),"\n",(0,s.jsx)(n.li,{children:"You want to use a try catch block when connecting to databases."}),"\n",(0,s.jsxs)(n.li,{children:["You also want to tell the PDO that all errors should be handled as an exception:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Reading Project Data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It is important to understand the structure of the data that you are working with."}),"\n",(0,s.jsx)(n.li,{children:"It is a good idea to map the relationships between the tables in a relational database."}),"\n",(0,s.jsxs)(n.li,{children:["Note: It is a very good idea to separate concerns:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Code that pulls information from the database should be separate from the code that displays the data."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"To query the database: $db->query(\u2018Query\u2019)"}),"\n",(0,s.jsx)(n.li,{children:"Querying the database throughout the files should also include a try catch block as well."}),"\n",(0,s.jsx)(n.li,{children:"To access the results of a query, you can loop through the results using the for each and pull information by using the column name as the key."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Accepting User Data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When handling values from outside the code, you need to filter input and escape output."}),"\n",(0,s.jsx)(n.li,{children:"There are two possible form submission types, get and post."}),"\n",(0,s.jsxs)(n.li,{children:["In general GET is used when merely retrieving or getting data.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recall that the values become part of the URL."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"POST is used when it is taking other actions."}),"\n",(0,s.jsxs)(n.li,{children:["POST advantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Name-value pairs are not displayed in the URL"}),"\n",(0,s.jsxs)(n.li,{children:["URLS can be refreshed multiple times","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Causing duplication"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"More data can be submitted."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["First, you want to check that POST is being used:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"if ($_SERVER['REQUEST_METHOD'] == \"POST\""}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"You also want to use filter_input() to ensure that no malicious code is being sent in."}),"\n",(0,s.jsx)(n.li,{children:"Lastly, it is a good idea to trim the input of any whitespace."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Adding Projects:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Auto-incrementing IDS allow you to add records to a database without needing to add a primary key."}),"\n",(0,s.jsx)(n.li,{children:"A prepared statement is a template for a SQL statement that can be customized to fit our needs."}),"\n",(0,s.jsx)(n.li,{children:"A prepared statement also escapes the variables so that no SQL injection can occur."}),"\n",(0,s.jsx)(n.li,{children:"For each value in the prepared statement, you want to bind a value to it."}),"\n",(0,s.jsxs)(n.li,{children:["Then, execute the statement in a try catch block.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"$results = $db->prepare($sql);"}),"\n",(0,s.jsx)(n.li,{children:"$results->bindValue(1, $title, PDO::PARAM_STR);"}),"\n",(0,s.jsx)(n.li,{children:"$results->bindValue(2, $category, PDO::PARAM_STR);"}),"\n",(0,s.jsx)(n.li,{children:"$results->execute();"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Reading Task Data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Same process as the projects list."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remembering Form Data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can remember the form data by setting the variables as empty string before the server checks for the request method."}),"\n",(0,s.jsx)(n.li,{children:"Be sure to add it to the webpage so it shows up!"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Validating Dates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensuring that the dates are correct makes the data more valid."}),"\n",(0,s.jsx)(n.li,{children:"It also avoids SQL from erroring out.."}),"\n",(0,s.jsx)(n.li,{children:"It is good to check that the date will split into three different sections of the correct date. \\"}),"\n",(0,s.jsx)(n.li,{children:"Then the checkDate(month, day, year) can check to ensure that the date is actually a valid date."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Totaling Time:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Reports allow you to understand what you have and make a story.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["It can Describe","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Visitors"}),"\n",(0,s.jsx)(n.li,{children:"Forecast inventory"}),"\n",(0,s.jsx)(n.li,{children:"Which pages are the most popular?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Summarizing Project Time:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To fetch all of the results from a query:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"return $results->fetchAll(PDO::FETCH_ASSOC);"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"The next() function can look at the next item in an array."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Filtering By Project:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The is_array() function checks if the argument inserted is an array."}),"\n",(0,s.jsx)(n.li,{children:"It is useful to include the WHERE clause outside of the made SQL statement so it is easy to modify."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Filtering by Category:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Using a switch statement can be really powerful when applying filters to tons of data."}),"\n",(0,s.jsx)(n.li,{children:"It is also a good idea to build the project so that it is scalable, even if it may not be."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Filtering by Time Period:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Date reports are really common. They are normally separated by ranges."}),"\n",(0,s.jsxs)(n.li,{children:["strtotime() can be used in a multitude of ways:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"First day of last month"}),"\n",(0,s.jsx)(n.li,{children:"Last day of last month"}),"\n",(0,s.jsx)(n.li,{children:"-1 Saturday"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Naming Reports:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be sure to tell the user what they are looking at."}),"\n",(0,s.jsx)(n.li,{children:"ucwords() will title case the string inserted into it."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Updating Projects:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requirements change, so flexibility is needed when creating projects."}),"\n",(0,s.jsxs)(n.li,{children:["You can make a list from a call by doing:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"list($list elements\u2026.) = get_project($project_id)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Updating Tasks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Similar to updating projects."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Deleting Tasks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You need to be very careful when giving the option to delete entities. If an entry is accidentally deleted, there is no turning back from it."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Preserving Data Integrity:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When adding and removing data, you need to be aware of how it is viewed on the website."}),"\n",(0,s.jsx)(n.li,{children:"If you remove a piece of data, it should not affect how other data appears on the page."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);