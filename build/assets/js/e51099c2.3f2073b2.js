"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[1039],{3303:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"technologies/Git/Other Useful Github Commands","title":"Other Useful Commands","description":"- git log origin/main - Shows a list of commits, who committed them, and their commit message.","source":"@site/docs/technologies/Git/intermediate-git-techniques.md","sourceDirName":"technologies/Git","slug":"/technologies/Git/Other Useful Github Commands","permalink":"/docs/technologies/Git/Other Useful Github Commands","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"git","permalink":"/docs/tags/git"},{"inline":true,"label":"github","permalink":"/docs/tags/github"}],"version":"current","frontMatter":{"id":"Other Useful Github Commands","tags":["git","github"]},"sidebar":"technologies","previous":{"title":"Git + Github","permalink":"/docs/technologies/Git/Git + Github"},"next":{"title":"HTML Forms Documentation","permalink":"/docs/technologies/HTML/HTML Form Basics"}}');var t=n(4848),l=n(8453);const r={id:"Other Useful Github Commands",tags:["git","github"]},c="Other Useful Commands",a={},h=[{value:"Forcing Push to a Remote",id:"forcing-push-to-a-remote",level:2},{value:"Identify Merge Branches",id:"identify-merge-branches",level:2},{value:"Pruning Stale Branches",id:"pruning-stale-branches",level:2},{value:"Creating and Deleting Tags",id:"creating-and-deleting-tags",level:2},{value:"List Tags:",id:"list-tags",level:2},{value:"Pushing Tags to Remote Repositories",id:"pushing-tags-to-remote-repositories",level:2},{value:"Interactive Mode",id:"interactive-mode",level:2},{value:"Patch Mode",id:"patch-mode",level:2},{value:"Split a Hunk",id:"split-a-hunk",level:2},{value:"Edit a Hunk",id:"edit-a-hunk",level:2},{value:"Share Select Changes",id:"share-select-changes",level:2},{value:"Diff Patches",id:"diff-patches",level:2},{value:"Apply Diff Patches",id:"apply-diff-patches",level:2},{value:"Creating Formatted Patches",id:"creating-formatted-patches",level:2},{value:"Apply Formatted Patches:",id:"apply-formatted-patches",level:2},{value:"Rebase Commits",id:"rebase-commits",level:2},{value:"Merging vs. Rebasing",id:"merging-vs-rebasing",level:2},{value:"Interactive Rebasing",id:"interactive-rebasing",level:2},{value:"Squash Commits:",id:"squash-commits",level:2},{value:"Pull Rebase:",id:"pull-rebase",level:2},{value:"Log Options:",id:"log-options",level:2},{value:"Git Blame:",id:"git-blame",level:2},{value:"Bisect:",id:"bisect",level:2}];function o(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"other-useful-commands",children:"Other Useful Commands"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git log origin/main"})," - Shows a list of commits, who committed them, and their commit message."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git show origin/main"})," - Shows the log message and the text difference between your current branch and the specified branch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git reset -hard origin/master"})," - Reverts back to the master branch and deletes changes"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git branch -d branch_name"})," - Deletes a local branch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git push -d origin branch_name"})," - Deletes a remote branch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git switch -c new_branch"})," - Creates a new branch and switches to it (different from checkout?)"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"forcing-push-to-a-remote",children:"Forcing Push to a Remote"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Why force push?","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Local version is preferable to the remote version (master/production is broken)"}),"\n",(0,t.jsx)(i.li,{children:"Remote version went wrong and needs repair"}),"\n",(0,t.jsx)(i.li,{children:"Versions have diverged and merging is undesirable"}),"\n",(0,t.jsx)(i.li,{children:"Force push = replacement"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["To perform a force push:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"git push -f branchname"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"git push -force branchname"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Warning: This will undo the commits of fellow collaborators.","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Commits will disappear and collaborators will need to merge their changes with the new master, which can be incredibly frustrating."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Always let your collaborators know before doing a force push (will overwrite changes and history)"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"identify-merge-branches",children:"Identify Merge Branches"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Allows you to list branches that have been merged into a branch"}),"\n",(0,t.jsx)(i.li,{children:"Useful for knowing what features have been fully incorporated."}),"\n",(0,t.jsx)(i.li,{children:"Useful for cleanup after merging multiple different features."}),"\n",(0,t.jsx)(i.li,{children:"Uses the current branch as default."}),"\n",(0,t.jsx)(i.li,{children:"Can specify a branch or a remote branch instead!"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git branch -merged"})," - List any branches that have been merged into master"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git branch -no-merged"})," - List any branches that have not been merged into master"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git branch -r -merged"})," - List any remote branches that have not been merged"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"pruning-stale-branches",children:"Pruning Stale Branches"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Deletes all the stale branches","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Stale branch - a remote-tracking branch that no longer tracks anything because the actual branch in the remote repository has been deleted."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Deleting a remote branch also deleted the remote-tracking branch too."}),"\n",(0,t.jsxs)(i.li,{children:["If someone else deleted a remote branch, your remote-tracking branch remains","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"This requires you to prune the branch manually."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"You can fetch and prune at the same time."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git prune"})," is a different command, but it happens on its own."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git remote prune origin"})," - Prunes the stale remote-tracking branches"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git remote prune origin -dry-run"})," - Displays which branches would be pruned if you were to run the command again"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"creating-and-deleting-tags",children:"Creating and Deleting Tags"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Tagging allows you to mark points in history as important."}),"\n",(0,t.jsx)(i.li,{children:"It creates a named reference to a commit."}),"\n",(0,t.jsx)(i.li,{children:"It is most frequently used to make software release versions (v1.0, v1.1, v2.0)"}),"\n",(0,t.jsx)(i.li,{children:"Can mark key features or changes (ecommerce, redesign)"}),"\n",(0,t.jsx)(i.li,{children:"Can mark points for discussions (bugs/issues)"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git tag tag_name SHA(commit_id)"})," - Adds a lightweight tag"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:'git tag -am "message" tag_name SHA(commit_id)'})," - Adds an annotated tag, which is the most common and allows you to include a message."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git tag (-d / -delete) tag_name"})," - Deletes a tag"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"list-tags",children:"List Tags:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git tag (-l / -list)"})," - Return a list of all of your tags"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:'git tag -l "filter"'})," - Returns a list of strings that match the given filter. ",(0,t.jsx)(i.code,{children:"*"})," is the wildcard character"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git tag -n3"})," - Return a list of tags with their annotations"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"pushing-tags-to-remote-repositories",children:"Pushing Tags to Remote Repositories"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Like branches, tags are local unless shared to a remote"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git push"})," will not transfer tags by default."]}),"\n",(0,t.jsx)(i.li,{children:"Tags must be explicitly transferred."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git fetch"})," automatically retrieves shared tags"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git push origin tag_name"})," - Push a tag up to the remote repository"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git push origin -tags"})," - Push all of your tags up to the related repository"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git fetch -tags"})," - Fetch only tags (with necessary commits)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git push -d origin tag_name"})," - Deletes a remote tag"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"interactive-mode",children:"Interactive Mode"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Stage changes interactively."}),"\n",(0,t.jsx)(i.li,{children:"Allows staging only portions of changed files"}),"\n",(0,t.jsx)(i.li,{children:"Helps to make smaller, more focused commits"}),"\n",(0,t.jsx)(i.li,{children:"Feature of many Git GUI tools"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git add (-t / -interactive)"})," - Enter git's interactive mode"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"patch-mode",children:"Patch Mode"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Allows staging only portions of a changed file"}),"\n",(0,t.jsx)(i.li,{children:"\u201cHunk\u201d: an area where two files differ"}),"\n",(0,t.jsx)(i.li,{children:"Hunks can be staged, skipped, or split into smaller hunks."}),"\n",(0,t.jsx)(i.li,{children:"This is done in interactive mode."}),"\n",(0,t.jsxs)(i.li,{children:["Patch mode is also available from normal ",(0,t.jsx)(i.code,{children:"git add"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Patch mode can also be used for stash, reset, restore, and commit"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git add (-patch / -p)"})," - Stage changes using patch mode"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"split-a-hunk",children:"Split a Hunk"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Hunks can contain multiple changes"}),"\n",(0,t.jsx)(i.li,{children:"Tell git to try to split a hunk further"}),"\n",(0,t.jsx)(i.li,{children:"There must be one or more unchanged lines between changes to split a hunk."}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"edit-a-hunk",children:"Edit a Hunk"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Hunks can be edited manually"}),"\n",(0,t.jsx)(i.li,{children:"Useful when a hunk cannot be split automatically"}),"\n",(0,t.jsxs)(i.li,{children:["Edits are done using the Diff-style line prefixes: ",(0,t.jsx)(i.code,{children:"+"}),", ",(0,t.jsx)(i.code,{children:"-"}),", ",(0,t.jsx)(i.code,{children:"space"})]}),"\n",(0,t.jsx)(i.li,{children:"When editing, you need to make the final product look like an actual diff file."}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"share-select-changes",children:"Share Select Changes"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Cherry picking commits applies the changes from one or more existing commits"}),"\n",(0,t.jsx)(i.li,{children:"Each commit targeted will become a new commit on the current branch"}),"\n",(0,t.jsx)(i.li,{children:"Conceptually similar to copy and paste"}),"\n",(0,t.jsx)(i.li,{children:"New commits have different SHAs"}),"\n",(0,t.jsx)(i.li,{children:"You can cherry-pick commits from any branch"}),"\n",(0,t.jsx)(i.li,{children:"You cannot cherry-pick a merge commit."}),"\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.code,{children:"-e"})," or ",(0,t.jsx)(i.code,{children:"--edit"})," options will allow you to edit the commit message instead of accepting it as is."]}),"\n",(0,t.jsx)(i.li,{children:"Cherry Picking can cause conflicts"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git cherry-pick SHA (SHA..SHA)"})," - Cherry pick a commit or a range of commits to pull into your branch"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"diff-patches",children:"Diff Patches"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Share changes via files"}),"\n",(0,t.jsx)(i.li,{children:"Useful when changes are not ready for a public branch"}),"\n",(0,t.jsx)(i.li,{children:"Useful when collaborators do not share a remote"}),"\n",(0,t.jsx)(i.li,{children:"Discussion, review, approval processes."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git diff from-commit to-commit > output.diff"})," - Create a diff patch"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"apply-diff-patches",children:"Apply Diff Patches"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Applies changes in a diff patch file to the working directory"}),"\n",(0,t.jsx)(i.li,{children:"Makes changes but it does not commit them."}),"\n",(0,t.jsx)(i.li,{children:"No commit history is transferred"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git apply"})," does not return any information on what happened"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git apply output.diff"})," - Apply a diff patch to your current branch"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"creating-formatted-patches",children:"Creating Formatted Patches"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Export each commit in the Unix mailbox format"}),"\n",(0,t.jsx)(i.li,{children:"Useful for email distribution of changes"}),"\n",(0,t.jsx)(i.li,{children:"Includes the commit messages and some meta information."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"-o file_path"})," is a switch that will output the patch file to a certain directory"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"--stdout > feature.patch"})," will output the entire formatted patch to a single file."]}),"\n",(0,t.jsx)(i.li,{children:"The files will be numbered so that they are applied in the correct order."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git format-patch SHA..SHA"})," - Creates a formatted patch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git format-patch -1 SHA"})," - Creates a formatted patch for a single commit"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"apply-formatted-patches",children:"Apply Formatted Patches:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Extracts author, commit message, and changes from a mailbox message and apply them to the current branch"}),"\n",(0,t.jsx)(i.li,{children:"Similar to cherry-picking: same changes but with different SHAs"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git am directory/0001-some-name.patch"})," - Apply one patch file to the current branch."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git am directory/*.patch"})," - Apply all of the patch files to the current branch"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"rebase-commits",children:"Rebase Commits"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Take commits from a branch and replay them at another point, most often at the end of another branch"}),"\n",(0,t.jsx)(i.li,{children:"Useful to integrate recent commits without merging"}),"\n",(0,t.jsx)(i.li,{children:"Maintains a cleaner, more linear project history"}),"\n",(0,t.jsx)(i.li,{children:"Ensures topic branch commits apply cleanly"}),"\n",(0,t.jsx)(i.li,{children:"It moves the working-branch to the tip of the main branch."}),"\n",(0,t.jsx)(i.li,{children:"The SHAs will change."}),"\n",(0,t.jsx)(i.li,{children:"You can rebase onto other branches as well."}),"\n",(0,t.jsx)(i.li,{children:"Rebasing commits may conflict with already existing code"}),"\n",(0,t.jsx)(i.li,{children:"Git pauses rebase before each conflicting commit"}),"\n",(0,t.jsx)(i.li,{children:"Very similar to resolving merge conflicts"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"--skip"})," will skip that commit"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"--abort"})," will abort the rebase altogether"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase main"})," - Rebase the current branch to tip of main"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase -onto newbase upstream branch"})," - Rebase onto another working branch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase --continue"})," - Continue the rebase after resolving the merge conflict"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git merge-base main new_feature"})," - Returns the commit where the topic branch diverges from the main branch"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"merging-vs-rebasing",children:"Merging vs. Rebasing"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Both ways to incorporate changes from one branch into another branch"}),"\n",(0,t.jsx)(i.li,{children:"Similar ends but the means are totally different"}),"\n",(0,t.jsx)(i.li,{children:"Side effects are important to understand"}),"\n",(0,t.jsxs)(i.li,{children:["Merging","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Adds a merge commit each time"}),"\n",(0,t.jsx)(i.li,{children:"Nondestructive"}),"\n",(0,t.jsx)(i.li,{children:"Complete record of what happened and when"}),"\n",(0,t.jsx)(i.li,{children:"Easier to undo"}),"\n",(0,t.jsx)(i.li,{children:"Logs can become cluttered and nonlinear"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Rebasing","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"No additional merge commit"}),"\n",(0,t.jsx)(i.li,{children:"Destructive: SHA changes, commits are rewritten"}),"\n",(0,t.jsx)(i.li,{children:"No longer a complete record of what happened when"}),"\n",(0,t.jsx)(i.li,{children:"Trickier to undo"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"DO NOT rebase on a public branch: will ruin collaborators work"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"interactive-rebasing",children:"Interactive Rebasing"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Rebasing does have an interactive mode"}),"\n",(0,t.jsx)(i.li,{children:"Allows you to modify commits as they are being replayed"}),"\n",(0,t.jsxs)(i.li,{children:["Opens the ",(0,t.jsx)(i.code,{children:"git-rebase-todo"})," file for editing"]}),"\n",(0,t.jsx)(i.li,{children:"Can reorder or skip commits"}),"\n",(0,t.jsx)(i.li,{children:"Can edit the commit contents"}),"\n",(0,t.jsxs)(i.li,{children:["Can also allow you to edit the last few commits","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"This is destructive, so it should only be used in local branches"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase -i main new_feature"})," - Rebase in interactive mode"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase -i HEAD~3"})," - Picks up the last three commits and begins interactive mode"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"squash-commits",children:"Squash Commits:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Folds two or more commits into one"}),"\n",(0,t.jsx)(i.li,{children:"Squash will combine the change sets and concatenate the commit messages together."}),"\n",(0,t.jsx)(i.li,{children:"Fixup does the same thing, but discards the entire commit message"}),"\n",(0,t.jsx)(i.li,{children:"Squash will use the first author in the commit series as the author"}),"\n",(0,t.jsx)(i.li,{children:"Squashing is a great way to clean up the commit history for a rebase or to keep the history clean"}),"\n",(0,t.jsx)(i.li,{children:"This is destructive, so be careful!"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git rebase -i HEAD~3"})," - Allows you to squash the last three commits in the rebase interactive mode"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"pull-rebase",children:"Pull Rebase:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can also rebase a ",(0,t.jsx)(i.code,{children:"git pull"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"Fetch from remote, then rebase instead of merging"}),"\n",(0,t.jsx)(i.li,{children:"Keeps the history cleaner by reducing the number of merge commits"}),"\n",(0,t.jsx)(i.li,{children:"Only use on local commits not shared to a remote"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git pull (-r / --rebase)"})," - Pull using the rebase option"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git pull -rebase=preserve"})," - Pull and squash the newest commits, but keep any merge commits that were made."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"log-options",children:"Log Options:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Log is the primary interface to Git"}),"\n",(0,t.jsx)(i.li,{children:"Log has many options"}),"\n",(0,t.jsx)(i.li,{children:"Log can sort, filter, and format output"}),"\n",(0,t.jsx)(i.li,{children:"Three very useful log commands"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git log filename.txt"})," - Will list a record of all the changes that have happened to that file"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git log (-p/-patch)"})," - Lists the commits as patches, only showing the difference between files"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"git-blame",children:"Git Blame:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Browse annotated file."}),"\n",(0,t.jsx)(i.li,{children:"Determine who changed lines in a file and why"}),"\n",(0,t.jsx)(i.li,{children:"Useful for probing the history behind a file's contents"}),"\n",(0,t.jsx)(i.li,{children:"Useful for identifying which commit introduced a bug"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git blame filename"})," - Annotate file with commit details"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git blame -w filename"})," - ",(0,t.jsx)(i.code,{children:"-w"})," ignores whitespace"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git blame -L ---, --- filename"})," - Blame the file at the specified lines"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git blame SHA filename"})," - Annotate the file at this commit"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"bisect",children:"Bisect:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Find the commit that introduced a bug or regression"}),"\n",(0,t.jsx)(i.li,{children:"Mark last good revision and first bad revision"}),"\n",(0,t.jsx)(i.li,{children:"Resets code to midpoint"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git bisect start"})," - Starts the bisect session"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git bisect good branchname/SHA"})," - Marks the good version of the code"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git bisect bad branchname/SHA"})," - Marks the bad version of the code"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git bisect reset"})," - Will end the session and reset your code back to its original version"]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>c});var s=n(6540);const t={},l=s.createContext(t);function r(e){const i=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);