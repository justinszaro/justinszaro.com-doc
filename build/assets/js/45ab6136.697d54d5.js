"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[4019],{4172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"technologies/MySQL/Reporting with SQL","title":"Reporting with SQL","description":"| SELECT \\\\ FROM \\\\ ORDER BY \\\\; | Order the results of the query in ascending order by the column named. You can also add the ASC and DESC to change the order.  |","source":"@site/docs/technologies/MySQL/reporting-with-sql.md","sourceDirName":"technologies/MySQL","slug":"/technologies/MySQL/Reporting with SQL","permalink":"/docs/technologies/MySQL/Reporting with SQL","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"mysql","permalink":"/docs/tags/mysql"}],"version":"current","frontMatter":{"id":"Reporting with SQL","tags":["mysql"]},"sidebar":"technologies","previous":{"title":"Querying Relational Databases","permalink":"/docs/technologies/MySQL/Querying Relational Databases"},"next":{"title":"SQL Basics","permalink":"/docs/technologies/MySQL/SQL Basics"}}');var s=t(4848),i=t(8453);const r={id:"Reporting with SQL",tags:["mysql"]},o=void 0,d={},c=[];function a(e){const n={li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table> ORDER BY <column>;"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Order the results of the query in ascending order by the column named. You can also add the ASC and DESC to change the order."})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table> LIMIT <integer>;"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Limit the number of rows returned from a query."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table> LIMIT <int> OFFSET <int>;"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Sets an offset for a query where you want to skip a number of results."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"UPPER(<column>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Function that uppercase a string when returned from a query."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT first_name"}),(0,s.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT username, LENGTH(username) FROM customers;"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The LENGTH() operator returns the length of a string."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"UPPER()"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Make a string totally uppercase."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"LOWER()"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Makes a string totally lowercase."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SUBSTR(<value or column>, <start>, <length>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Provides a substring of a large body of text."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"REPLACE(<value or column>, <target>, <replacement>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Used to replace portions of strings when returned from a query."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"COUNT(<>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Allows you to count the total number of rows returned from a query."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT COUNT(DISTINCT <column>) FROM <table>;"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The DISTINCT keyword only returns distinct values."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT COUNT(*) FROM <table> GROUP BY <column>;"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Groups the queries based on the column named."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SUM(<column>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Sum the total number in the column"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"HAVING"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A keyword used when aggregating SUM()."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"AVG(<numeric column>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Aggregates a numeric column to give you an average."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"MIN(<numeric column>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Finds the minimum value in a numeric column."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"MAX(<numeric column>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Find the maximum value in a numeric column."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"DATE(<timestring>, <modifier>, <modifier>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Make, calculate, or find dates using SQL."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"TIME(<datetime>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Strip the date off the datetime and just give the time back."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"STRFTIME(<format string>, <time string>, <modifier>)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Outputs the string in the requested formatting."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Retrieving Results in a Particular Order:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You may want to order results because:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sorting Contacts"}),"\n",(0,s.jsx)(n.li,{children:"Sorting Movies by Year"}),"\n",(0,s.jsx)(n.li,{children:"Sorting Products by Price"}),"\n",(0,s.jsx)(n.li,{children:"Sorting Articles by Date"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["First, you need to start with a select statement and use the ORDER BY keyword to sort the column into ascending order.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT <columns> FROM <table> ORDER BY <column>;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"You can also use the keywords ASC and DESC to change the order it is going in."}),"\n",(0,s.jsxs)(n.li,{children:["You can also order by multiple columns by including more columns after a comma.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT <columns> FROM <table> ORDER BY <column>, <column2>;"}),"\n",(0,s.jsx)(n.li,{children:"Order is important!"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Limiting the Number of Results:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To limit the number of results in a query. Use the keyword LIMIT and include an integer for how many results you want.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT <columns> FROM <table> LIMIT <integer>;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"LIMIT must be used at the end of the query."}),"\n",(0,s.jsx)(n.li,{children:"LIMIT can be different for other databases, so be sure to look up the syntax if the command throws an error."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Paging Through Results:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"What if you want to limit the number of results because they are being paginated across pages."}),"\n",(0,s.jsxs)(n.li,{children:["In this case, you can use the OFFSET keyword.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT <columns> FROM <table> LIMIT <int> OFFSET <int>;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"The OFFSET keyword comes after the LIMIT keyword."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"What Are Functions?:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Functions are different from normal keywords because they can manipulate the results of the query in interesting ways."}),"\n",(0,s.jsx)(n.li,{children:"Keyword - Data presented as unaltered."}),"\n",(0,s.jsx)(n.li,{children:"Operators - Performs comparisons and simple manipulation"}),"\n",(0,s.jsxs)(n.li,{children:["Functions - Presents data differently through manipulation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Syntax: <NAME>(<column>)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"UPPER(<column>)"}),"\n",(0,s.jsx)(n.li,{children:"SELECT UPPER(name) from passport_holders;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Adding Text Columns Together:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recall that the AS keyword can be used to rename columns when the query is returned."}),"\n",(0,s.jsx)(n.li,{children:"You can use the Concatenation Operator to join two string results together."}),"\n",(0,s.jsxs)(n.li,{children:["The Concatenation Operator for SQL Lite is ||.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In other databases, it may be +, or CONCAT()"}),"\n",(0,s.jsx)(n.li,{children:"Ex: SELECT first_name || last_name FROM people;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Note: single quotes should be used for string literals and doubles quotes should be used for column aliases."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Finding the Length of Text:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There is a SQL function called LENGTH() that returns the length of a string.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT username, LENGTH(username) FROM customers;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Length can also be used in the WHERE clause as well. It can be included anywhere where a value or Column name is included."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Changing the Case of Text Columns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There are two different functions for changing cases:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"UPPER() makes the string uppercase."}),"\n",(0,s.jsx)(n.li,{children:"LOWER() makes the string lowercase."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Creating Excerpts FROM Text:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You don't want to overload information when serving it to the user."}),"\n",(0,s.jsx)(n.li,{children:"For example, you may want to only return part of a blog post on its preview page."}),"\n",(0,s.jsx)(n.li,{children:"Substring - A smaller string from another string."}),"\n",(0,s.jsxs)(n.li,{children:["You want to use the SUBSTR function.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SUBSTR(<value or column>, <start>, <length>)"}),"\n",(0,s.jsx)(n.li,{children:"This does require all three arguments, unlike other operators which are normally one."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Replacing Portions of Text:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This is useful for handling confidential information or modifying it so that you can edit its HTML."}),"\n",(0,s.jsxs)(n.li,{children:["For this purpose, you would use the REPLACE() function:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REPLACE(<value or column>, <target>, <replacement>)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Counting Results:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["COUNT() is a function that allows you to","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"count the number of rows in a table"}),"\n",(0,s.jsx)(n.li,{children:"Count the number of results"}),"\n",(0,s.jsx)(n.li,{children:"Distinct Entries"}),"\n",(0,s.jsx)(n.li,{children:"Aggregates."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["To get the total number of users:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT COUNT(*) FROM customers ORDER BY id DESC LIMIT 1;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Count only counts the rows that have a value, the NULL values will not be counted. Using an * is safer if you want everything."}),"\n",(0,s.jsx)(n.li,{children:"The DISTINCT keyword causes the query to only return unique values."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Counting Groups in Rows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"What if you want to know how many objects are in which category."}),"\n",(0,s.jsxs)(n.li,{children:["In this case, we want to use GROUP BY keyword to group the categories.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT category, COUNT(*) FROM books GROUP BY category;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Getting the Grand Total:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The SUM() function sums any numeric column."}),"\n",(0,s.jsxs)(n.li,{children:["When the GROUP BY keyword is also used, you can sum by column.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT SUM(cost), user_id FROM orders GROUP BY user_id"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["SUM() cannot be used with a WHERE clause. Instead use a HAVING keyword after the GROUP BY Keyword.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT SUM(<numeric column>) AS <alias> FROM <table> GROUP BY <another column> HAVING <condition> ORDER BY <column>;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Calculating Averages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There is also an average keyword: AVG()","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT AVG(cost) as \u201caverage\u201d FROM orders;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Getting Minimum and Maximum Values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MAX() will find the maximum value in a numeric column."}),"\n",(0,s.jsx)(n.li,{children:"MIN() will find the minimum value in a numeric column"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Performing Math on Numeric Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We have already seen numerous operators for comparisons."}),"\n",(0,s.jsxs)(n.li,{children:["There are operators that can be performed on numeric types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Addition +"}),"\n",(0,s.jsx)(n.li,{children:"Subtraction -"}),"\n",(0,s.jsx)(n.li,{children:"Multiplication *"}),"\n",(0,s.jsx)(n.li,{children:"Division /"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Ex: SELECT 4 + 9; Will return 13."}),"\n",(0,s.jsx)(n.li,{children:"For division, if a float is used, the output will be a float. If integers are only used, it will be rounded to the nearest whole number."}),"\n",(0,s.jsxs)(n.li,{children:["The ROUND() function will round a float number.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: SELECT name, ROUND(price * 1.06, 2) AS \u201cPrice in Florida\u201d FROM products;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Differences Between Databases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each database system has its own way of working with dates.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They can change the function to calculate dates, how the date is formatted, and how it is readable in human form."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Creating Up-to-the-Minute Reports:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can get today's date using a SQL function."}),"\n",(0,s.jsxs)(n.li,{children:["The DATE() function will give you back today\u2019s date if you pass in the string \u201cnow\u201d","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SELECT DATE(\u201cnow\u201d) -> 2023-06-17"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Calculating Dates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The DATE() function can also be used to calculate past or future dates using the modifier."}),"\n",(0,s.jsx)(n.li,{children:"Date(<time string>, <modifier>, <modifier>)"}),"\n",(0,s.jsxs)(n.li,{children:["Date(\u201c2016-02-01\u201d)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Order is important! Year-Month-Day"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The modifiers can add or subtract months, days, or years using the numeric operator","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Date(\u201cnow\u201d, \u201c-7 Days\u201d, \u201c+1 Month\u201d )"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Formatting Dates for Reporting:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There are three different types of date data types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Date: 2015-04-01"}),"\n",(0,s.jsx)(n.li,{children:"Time: 23:12:01"}),"\n",(0,s.jsx)(n.li,{children:"DateTime: 2015-04-01 23:12:01"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"This isn\u2019t very readable. The DATE() function will trim the datetime to just date. TIME() will be the same thing."}),"\n",(0,s.jsx)(n.li,{children:"There is a way to format the output of a datetime."}),"\n",(0,s.jsxs)(n.li,{children:["STRFTIME(<format string>, <time string>, <modifier>)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ex: STRFTIME(\u201c%d/%m/%Y\u201d, \u201c2015-04-01 23:12:01\u201d, <modifier>)"}),"\n",(0,s.jsx)(n.li,{children:"Output: 01/04/2015"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var l=t(6540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);