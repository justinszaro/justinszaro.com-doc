"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[9049],{8320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"technologies/MySQL/Modifying Data With MySql","title":"Modifying Data With MySql","description":"| INSERT INTO \\\\ VALUES (\\\\, \\\\, \\\\, \u2026.); | Insert data into a table.  |","source":"@site/docs/technologies/MySQL/modifying-data-with-sql.md","sourceDirName":"technologies/MySQL","slug":"/technologies/MySQL/Modifying Data With MySql","permalink":"/docs/technologies/MySQL/Modifying Data With MySql","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"mysql","permalink":"/docs/tags/mysql"}],"version":"current","frontMatter":{"id":"Modifying Data With MySql","tags":["mysql"]},"sidebar":"technologies","previous":{"title":"Common Table Expressions","permalink":"/docs/technologies/MySQL/Common Table Expressions"},"next":{"title":"MySQL Advanced Topics","permalink":"/docs/technologies/MySQL/MySQL Advanced Topics"}}');var l=t(4848),s=t(8453);const a={id:"Modifying Data With MySql",tags:["mysql"]},o=void 0,r={},d=[];function c(e){const n={li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"INSERT INTO <table> VALUES (<value1>, <value2>, <value3>, \u2026.);"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Insert data into a table."})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"INSERT INTO <table> (<column1>, <column2>, <column3>, \u2026.) VALUES (<value1>, <value2>, <value3>, \u2026.);"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Inserting data into a table by specifying the column they should go into. To insert multiple values, they can be included like a list."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"UPDATE <table> SET <column> = <value>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Update a value in the table."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"UPDATE <table> SET <column> = <value> WHERE<CONDITION>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Used to update specific rows."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"DELETE FROM <table>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Deletes all of the tables from the table."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"DELETE FROM <table> WHERE <CONDITION>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Deletes specific rows from the table."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"BEGIN TRANSACTION; or BEGIN;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Begins a transaction."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"COMMIT;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Runs and saves all of the commands stored in a transaction."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"ROLLBACK;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"This will rollback commands issued in a transaction before it is committed."})]})]})]}),"\n",(0,l.jsx)(n.p,{children:"Introduction to CRUD"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Data must change over time, just like everything else."}),"\n",(0,l.jsxs)(n.li,{children:["CRUD:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"C - Create or add data to the database"}),"\n",(0,l.jsx)(n.li,{children:"R - Read the Data"}),"\n",(0,l.jsx)(n.li,{children:"U - Update the data"}),"\n",(0,l.jsx)(n.li,{children:"D - Delete the data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Adding a Row to a Table:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Every CRUD operation has its own keyword.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: Read is SELECT"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["The keyword for the create operation is INSERT INTO","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: INSERT INTO <table> VALUES (<value1>, <value2>, <value3>, \u2026.);"}),"\n",(0,l.jsx)(n.li,{children:"These values need to be in the same order as the schema describes."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Example: INSERT INTO books VALUES (16, \u201c1984\u201d, \u201cGeorge Orwell\u201d, \u201cFiction\u201d, 1949);"}),"\n",(0,l.jsxs)(n.li,{children:["Manually entering IDs can clash with other people and is a pain to find out.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"To fix this, there is an auto increment feature that will automatically assign an ID when data is created or removed."}),"\n",(0,l.jsx)(n.li,{children:"In this case, insert NULL into the ID and it will auto increment for you."}),"\n",(0,l.jsx)(n.li,{children:"Ex: INSERT INTO books VALUES (NULL, \u201c1984\u201d, \u201cGeorge Orwell\u201d, \u201cFiction\u201d, 1949);"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"You can also insert NULL into values that you do not have yet."}),"\n",(0,l.jsxs)(n.li,{children:["You can also include the list of column names that you are adding to before the values.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: INSERT INTO books (id, book_id, patron_id, loaned_on, return by, returned_on) VALUES (NULL, \u201c1984\u201d, \u201cGeorge Orwell\u201d, \u201cFiction\u201d, 1949);"}),"\n",(0,l.jsx)(n.li,{children:"The order of the columns and the value\u2019s added do need to line up correctly."}),"\n",(0,l.jsx)(n.li,{children:"You can make a value NULL by not including it in the column section and not giving it a value."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"It is possible for a developer to enforce a rule that a value cannot be NULL."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Adding Multiple Rows to a Table:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Adding rows 1 by 1 can be tedious and slow."}),"\n",(0,l.jsx)(n.li,{children:"You can add multiple rows in a single command"}),"\n",(0,l.jsx)(n.li,{children:"Database seed files have multiple rows added in multiple lines to set up the database."}),"\n",(0,l.jsxs)(n.li,{children:["You can add multiple entries to a database by separating the value lists by a comma.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: INSERT INTO books (id, book_id, patron_id, loaned_on, return by, returned_on) VALUES (NULL, \u201c1984\u201d, \u201cGeorge Orwell\u201d, \u201cFiction\u201d, 1949), (NULL, \u201c1984\u201d, \u201cGeorge Orwell\u201d, \u201cFiction\u201d, 1949);"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Update All Rows or Columns in a Table:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The update keyword in SQL is UPDATE."}),"\n",(0,l.jsxs)(n.li,{children:["An update statement looks like this:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"UPDATE <table> SET <column> = <value>;"}),"\n",(0,l.jsx)(n.li,{children:"In this case, the equal sign is an assignment operator."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Without specifying, it will update every value in the table.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: UPDATE patrons SET last_name = \u201cAnonymous\u201d;"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Update statements can also be chained in the same way as INSERT INTO statements.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: UPDATE <table> SET <column> = <value>, <column2> = <value2>;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Updating Specific Rows:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["To update a specific row, you can use any of the condition operators.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: UPDATE <table> SET <column> = <value> WHERE <CONDITION> <VALUE> ;"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"You can also chain condition statements using the ADD or OR keywords."}),"\n",(0,l.jsx)(n.li,{children:"It is a good idea to SELECT the rows you want to change to ensure you are changing the rows you actually wish to update."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Removing Data from ALL Rows in a Table:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The last keyword for the CRUD operators is DELETE","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: DELETE FROM <table>;"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"The DELETE operator is final. BE VERY CAREFUL WHEN USING THIS COMMAND."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Removing Specific Rows:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Removing Specific rows requires the condition operators we used before.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: DELETE FROM <table> WHERE <CONDITION>;"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Introduction to Transactions:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"When working in a database, you need to be sure that the command you are running is exactly the command that you want to run."}),"\n",(0,l.jsx)(n.li,{children:"It is incredibly difficult to revert a database back to previous changes."}),"\n",(0,l.jsx)(n.li,{children:"Every command you run automatically runs in AutoCommit mode, which means it gets saved to disk right away."}),"\n",(0,l.jsx)(n.li,{children:"You may not want this to happen, for example, you may want multiple statements to run together."}),"\n",(0,l.jsx)(n.li,{children:"Seeding - Populating a database for the first time."}),"\n",(0,l.jsx)(n.li,{children:"Scripting - Making a SQL file that populates the database or runs multiple commands."}),"\n",(0,l.jsxs)(n.li,{children:["If a script is interrupted, you may have trouble figuring out what happened.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"To avoid this, you can use a Transaction instead."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"To turn off autocommit: use the keyword BEGIN TRANSACTION; or BEGIN;"}),"\n",(0,l.jsx)(n.li,{children:"To end a transaction: use the keyword COMMIT;"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Rolling Back from Transactions:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"What if you want to undo a transaction? You can use the keyword ROLLBACK;"}),"\n",(0,l.jsx)(n.li,{children:"This will undo the commands you ran in a transaction before committing the transaction."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Databases with Frameworks:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ORMS are used with most common programming languages"}),"\n",(0,l.jsx)(n.li,{children:"ORMS - Object-Relational Mapping"}),"\n",(0,l.jsx)(n.li,{children:"It is a way to use another programming language instead of SQL to perform CRUD operations."}),"\n",(0,l.jsxs)(n.li,{children:["Benefits:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Handles transactions"}),"\n",(0,l.jsx)(n.li,{children:"Only one language is needed."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Examples:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Hibernate for Java"}),"\n",(0,l.jsx)(n.li,{children:"Django ORM for Python."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const l={},s=i.createContext(l);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);