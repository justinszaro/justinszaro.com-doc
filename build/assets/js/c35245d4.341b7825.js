"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[977],{303:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"technologies/React/Packages/Formik/introduction","title":"Easy Peasy Introduction","description":"Easy Peasy is an abstraction of Redus that allows you to quickly and easily manage your React State. No configuration is required.","source":"@site/docs/technologies/React/Packages/Formik/introduction.md","sourceDirName":"technologies/React/Packages/Formik","slug":"/technologies/React/Packages/Formik/introduction","permalink":"/docs/technologies/React/Packages/Formik/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"technologies","previous":{"title":"Getting Started with Formik","permalink":"/docs/technologies/React/Packages/Formik/getting-started"},"next":{"title":"React Router Core API","permalink":"/docs/technologies/React/Packages/ReactRouter/core/api"}}');var a=i(4848),l=i(8453);const t={},s="Easy Peasy Introduction",o={},m=[{value:"Installation",id:"installation",level:2},{value:"Overview: What is Formik?",id:"overview-what-is-formik",level:2},{value:"The Basics:",id:"the-basics",level:2},{value:"A simple newsletter sign-up form.",id:"a-simple-newsletter-sign-up-form",level:3},{value:"Validation",id:"validation",level:3},{value:"Visited Fields",id:"visited-fields",level:4},{value:"Schema Validation with Yup",id:"schema-validation-with-yup",level:4},{value:"Reducing Boilerplate",id:"reducing-boilerplate",level:3},{value:"Get Field Props",id:"get-field-props",level:4},{value:"Leveraging React Context",id:"leveraging-react-context",level:4},{value:"Wrapping Up",id:"wrapping-up",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"easy-peasy-introduction",children:"Easy Peasy Introduction"})}),"\n",(0,a.jsx)(n.p,{children:"Easy Peasy is an abstraction of Redus that allows you to quickly and easily manage your React State. No configuration is required."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["React and React Dom must be installed, with version higher than ",(0,a.jsx)(n.code,{children:"v16.8.0"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install react\nnpm install react-dom\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Then, install Easy Peasy"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install easy-peasy\n"})}),"\n",(0,a.jsx)(n.h2,{id:"overview-what-is-formik",children:"Overview: What is Formik?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Formik is a small group of react components and hooks for building forms in React."}),"\n",(0,a.jsxs)(n.li,{children:["It helps with three annoying parts:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Getting values in and out of form state"}),"\n",(0,a.jsx)(n.li,{children:"Validation and Error Messages"}),"\n",(0,a.jsx)(n.li,{children:"Handling Form Submission"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Formik assists in organizing, testing, refactoring, and reasoning your forms."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-basics",children:"The Basics:"}),"\n",(0,a.jsx)(n.h3,{id:"a-simple-newsletter-sign-up-form",children:"A simple newsletter sign-up form."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The example found in the following path is a newsletter sign-up form:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"examples/React/packages/formik"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"initialValues"})," are set in the Formik instantiation along with an ",(0,a.jsx)(n.code,{children:"onSubmit"})," hook."]}),"\n",(0,a.jsxs)(n.li,{children:["Here are the helper methods in the first example:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"handleSubmit"})," - A submission handler."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"handleChange"})," - A change handler to pass to each input, select, or textarea."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"value"})," - The forms current values."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Some Things to Notice (After adding First Name and Last Name)","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The exact same change handler is used for each form input."}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"id"})," and ",(0,a.jsx)(n.code,{children:"name"})," HTML attributes match the property defined in ",(0,a.jsx)(n.code,{children:"initialValues"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"In terms of a form that is pure react, the form can be thought of like this:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const [values, setValues] = React.useState({});\n\nconst handleChange = event => {\n  setValues(prevValues => ({\n    ...prevValues,\n    // we use the name to tell Formik which key of `values` to update\n    [event.target.name]: event.target.value\n  });\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The built in HTML validation does work well with Formik.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"However, this is difficult to show to the user and only works in-browser."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Formik can keep track of the forms validations and error messages."}),"\n",(0,a.jsxs)(n.li,{children:["To add validation, specify a validate function and produce an error object that matches the shape of ",(0,a.jsx)(n.code,{children:"values"}),"/",(0,a.jsx)(n.code,{children:"initialValues"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { useFormik } from "formik";\n\n// A custom validation function. This must return an object\n// which keys are symmetrical to our values/initialValues\nconst validate = (values) => {\n  const errors = {};\n  if (!values.firstName) {\n    errors.firstName = "Required";\n  } else if (values.firstName.length > 15) {\n    errors.firstName = "Must be 15 characters or less";\n  }\n\n  if (!values.lastName) {\n    errors.lastName = "Required";\n  } else if (values.lastName.length > 20) {\n    errors.lastName = "Must be 20 characters or less";\n  }\n\n  if (!values.email) {\n    errors.email = "Required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n\n  return errors;\n};\n\nconst SignupForm = () => {\n  // Pass the useFormik() hook initial form values, a validate function that will be called when\n  // form values change or fields are blurred, and a submit function that will\n  // be called when the form is submitted\n  const formik = useFormik({\n    initialValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n    },\n    validate,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor="firstName">First Name</label>\n      <input\n        id="firstName"\n        name="firstName"\n        type="text"\n        onChange={formik.handleChange}\n        value={formik.values.firstName}\n      />\n      {formik.errors.firstName ? <div>{formik.errors.firstName}</div> : null}\n\n      <label htmlFor="lastName">Last Name</label>\n      <input\n        id="lastName"\n        name="lastName"\n        type="text"\n        onChange={formik.handleChange}\n        value={formik.values.lastName}\n      />\n      {formik.errors.lastName ? <div>{formik.errors.lastName}</div> : null}\n\n      <label htmlFor="email">Email Address</label>\n      <input\n        id="email"\n        name="email"\n        type="email"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n      {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["On default, the validation occurs after every keystroke, blur event, and before submission. The ",(0,a.jsx)(n.code,{children:"onSubmit"})," function will only trigger if there are no errors."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"visited-fields",children:"Visited Fields"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Showing errors on all the fields is a confusing UX for the users."}),"\n",(0,a.jsx)(n.li,{children:"We only want to show errors for the elements that the user's have seen."}),"\n",(0,a.jsxs)(n.li,{children:["Formik keeps track of which fields have been visited. It stores its information in a field called ",(0,a.jsx)(n.code,{children:"touched"}),", which mirrors the same shape as the others.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The keys are the name of the field and the value is a boolean."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"To take advantage of touched, we can pass formik.handleBlur to each onBlur prop."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { useFormik } from "formik";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = "Required";\n  } else if (values.firstName.length > 15) {\n    errors.firstName = "Must be 15 characters or less";\n  }\n\n  if (!values.lastName) {\n    errors.lastName = "Required";\n  } else if (values.lastName.length > 20) {\n    errors.lastName = "Must be 20 characters or less";\n  }\n\n  if (!values.email) {\n    errors.email = "Required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n\n  return errors;\n};\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n    },\n    validate,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor="firstName">First Name</label>\n      <input\n        id="firstName"\n        name="firstName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.errors.firstName ? <div>{formik.errors.firstName}</div> : null}\n\n      <label htmlFor="lastName">Last Name</label>\n      <input\n        id="lastName"\n        name="lastName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.errors.lastName ? <div>{formik.errors.lastName}</div> : null}\n\n      <label htmlFor="email">Email Address</label>\n      <input\n        id="email"\n        name="email"\n        type="email"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Then, the error logic can be changed to check if the variable has been touched."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { useFormik } from "formik";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = "Required";\n  } else if (values.firstName.length > 15) {\n    errors.firstName = "Must be 15 characters or less";\n  }\n\n  if (!values.lastName) {\n    errors.lastName = "Required";\n  } else if (values.lastName.length > 20) {\n    errors.lastName = "Must be 20 characters or less";\n  }\n\n  if (!values.email) {\n    errors.email = "Required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n\n  return errors;\n};\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n    },\n    validate,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor="firstName">First Name</label>\n      <input\n        id="firstName"\n        name="firstName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor="lastName">Last Name</label>\n      <input\n        id="lastName"\n        name="lastName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor="email">Email Address</label>\n      <input\n        id="email"\n        name="email"\n        type="email"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h4,{id:"schema-validation-with-yup",children:"Schema Validation with Yup"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Lots of people use (",(0,a.jsx)(n.a,{href:"https://github.com/jquense/yup",children:"Yup"}),") for object schema validation."]}),"\n",(0,a.jsx)(n.li,{children:"To install:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install yup --save\n\n# or via yarn\n\nyarn add yup\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To get it working with up, change out the custom validation and rewrite it with Yup:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { useFormik } from "formik";\nimport * as Yup from "yup";\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string()\n        .max(15, "Must be 15 characters or less")\n        .required("Required"),\n      lastName: Yup.string()\n        .max(20, "Must be 20 characters or less")\n        .required("Required"),\n      email: Yup.string().email("Invalid email address").required("Required"),\n    }),\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor="firstName">First Name</label>\n      <input\n        id="firstName"\n        name="firstName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor="lastName">Last Name</label>\n      <input\n        id="lastName"\n        name="lastName"\n        type="text"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor="email">Email Address</label>\n      <input\n        id="email"\n        name="email"\n        type="email"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reducing-boilerplate",children:"Reducing Boilerplate"}),"\n",(0,a.jsx)(n.h4,{id:"get-field-props",children:"Get Field Props"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["To save time, ",(0,a.jsx)(n.code,{children:"useFormik()"})," returns a helper method called ",(0,a.jsx)(n.code,{children:"formik.getFieldProps()"})," to make it simpler to wire up inputs. It returns the exact group of ",(0,a.jsx)(n.code,{children:"onChange"}),", ",(0,a.jsx)(n.code,{children:"onBlur"}),", ",(0,a.jsx)(n.code,{children:"value"}),", and ",(0,a.jsx)(n.code,{children:"checked"})," for a given field."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { useFormik } from "formik";\nimport * as Yup from "yup";\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string()\n        .max(15, "Must be 15 characters or less")\n        .required("Required"),\n      lastName: Yup.string()\n        .max(20, "Must be 20 characters or less")\n        .required("Required"),\n      email: Yup.string().email("Invalid email address").required("Required"),\n    }),\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor="firstName">First Name</label>\n      <input\n        id="firstName"\n        type="text"\n        {...formik.getFieldProps("firstName")}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor="lastName">Last Name</label>\n      <input id="lastName" type="text" {...formik.getFieldProps("lastName")} />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor="email">Email Address</label>\n      <input id="email" type="email" {...formik.getFieldProps("email")} />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.h4,{id:"leveraging-react-context",children:"Leveraging React Context"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Formik comes with React-Context Components to make everything more verbose."}),"\n",(0,a.jsxs)(n.li,{children:["Examples:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"<Formik />"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"<Form />"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"<Field />"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"<ErrorMessage />"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport { Formik } from "formik";\nimport * as Yup from "yup";\n\nconst SignupForm = () => {\n  return (\n    <Formik\n      initialValues={{ firstName: "", lastName: "", email: "" }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, "Must be 15 characters or less")\n          .required("Required"),\n        lastName: Yup.string()\n          .max(20, "Must be 20 characters or less")\n          .required("Required"),\n        email: Yup.string().email("Invalid email address").required("Required"),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {(formik) => (\n        <form onSubmit={formik.handleSubmit}>\n          <label htmlFor="firstName">First Name</label>\n          <input\n            id="firstName"\n            type="text"\n            {...formik.getFieldProps("firstName")}\n          />\n          {formik.touched.firstName && formik.errors.firstName ? (\n            <div>{formik.errors.firstName}</div>\n          ) : null}\n\n          <label htmlFor="lastName">Last Name</label>\n          <input\n            id="lastName"\n            type="text"\n            {...formik.getFieldProps("lastName")}\n          />\n          {formik.touched.lastName && formik.errors.lastName ? (\n            <div>{formik.errors.lastName}</div>\n          ) : null}\n\n          <label htmlFor="email">Email Address</label>\n          <input id="email" type="email" {...formik.getFieldProps("email")} />\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n\n          <button type="submit">Submit</button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"This is what is actually happening internally!"}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"<Field>"})," component will render an ",(0,a.jsx)(n.code,{children:"<input>"})," component that, when given a ",(0,a.jsx)(n.code,{children:"name"})," prop, will automatically grab the respective ",(0,a.jsx)(n.code,{children:"onChange"}),", ",(0,a.jsx)(n.code,{children:"onBlur"}),", and value props and pass them to the element."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// <input className="form-input" placeHolder="Jane"  />\n<Field name="firstName" className="form-input" placeholder="Jane" />\n\n// <textarea className="form-textarea"/></textarea>\n<Field name="message" as="textarea" className="form-textarea" />\n\n// <select className="my-select"/>\n<Field name="colors" as="select" className="my-select">\n  <option value="red">Red</option>\n  <option value="green">Green</option>\n  <option value="blue">Blue</option>\n</Field>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"wrapping-up",children:"Wrapping Up"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You can even abstract more if you'd like to:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport { Formik, Form, useField } from "formik";\nimport * as Yup from "yup";\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className="text-input" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className="error">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  // React treats radios and checkbox inputs differently from other input types: select and textarea.\n  // Formik does this too! When you specify `type` to useField(), it will\n  // return the correct bag of props for you -- a `checked` prop will be included\n  // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\n  const [field, meta] = useField({ ...props, type: "checkbox" });\n  return (\n    <div>\n      <label className="checkbox-input">\n        <input type="checkbox" {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className="error">{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\nconst MySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <div>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className="error">{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\n// And now we can use these\nconst SignupForm = () => {\n  return (\n    <>\n      <h1>Subscribe!</h1>\n      <Formik\n        initialValues={{\n          firstName: "",\n          lastName: "",\n          email: "",\n          acceptedTerms: false, // added for our checkbox\n          jobType: "", // added for our select\n        }}\n        validationSchema={Yup.object({\n          firstName: Yup.string()\n            .max(15, "Must be 15 characters or less")\n            .required("Required"),\n          lastName: Yup.string()\n            .max(20, "Must be 20 characters or less")\n            .required("Required"),\n          email: Yup.string()\n            .email("Invalid email address")\n            .required("Required"),\n          acceptedTerms: Yup.boolean()\n            .required("Required")\n            .oneOf([true], "You must accept the terms and conditions."),\n          jobType: Yup.string()\n            .oneOf(\n              ["designer", "development", "product", "other"],\n              "Invalid Job Type"\n            )\n            .required("Required"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form>\n          <MyTextInput\n            label="First Name"\n            name="firstName"\n            type="text"\n            placeholder="Jane"\n          />\n\n          <MyTextInput\n            label="Last Name"\n            name="lastName"\n            type="text"\n            placeholder="Doe"\n          />\n\n          <MyTextInput\n            label="Email Address"\n            name="email"\n            type="email"\n            placeholder="jane@formik.com"\n          />\n\n          <MySelect label="Job Type" name="jobType">\n            <option value="">Select a job type</option>\n            <option value="designer">Designer</option>\n            <option value="development">Developer</option>\n            <option value="product">Product Manager</option>\n            <option value="other">Other</option>\n          </MySelect>\n\n          <MyCheckbox name="acceptedTerms">\n            I accept the terms and conditions\n          </MyCheckbox>\n\n          <button type="submit">Submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var r=i(6540);const a={},l=r.createContext(a);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);