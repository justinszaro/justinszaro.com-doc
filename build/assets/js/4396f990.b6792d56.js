"use strict";(self.webpackChunkjustinszaro_com_docs=self.webpackChunkjustinszaro_com_docs||[]).push([[9485],{1084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"technologies/MySQL/Querying Relational Databases","title":"Querying Relational Databases","description":"| SELECT \\\\ FROM \\\\ INNER JOIN \\\\ ON \\\\ WHERE \\\\; | Inner join two tables together by using equality criteria.  |","source":"@site/docs/technologies/MySQL/querying-relational-databases.md","sourceDirName":"technologies/MySQL","slug":"/technologies/MySQL/Querying Relational Databases","permalink":"/docs/technologies/MySQL/Querying Relational Databases","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"mysql","permalink":"/docs/tags/mysql"}],"version":"current","frontMatter":{"id":"Querying Relational Databases","tags":["mysql"]},"sidebar":"technologies","previous":{"title":"MySQL Advanced Topics","permalink":"/docs/technologies/MySQL/MySQL Advanced Topics"},"next":{"title":"Reporting with SQL","permalink":"/docs/technologies/MySQL/Reporting with SQL"}}');var l=t(4848),s=t(8453);const a={id:"Querying Relational Databases",tags:["mysql"]},r=void 0,o={},h=[];function c(e){const n={li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> INNER JOIN <table2> ON <equality criteria> WHERE <search criteria>;"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Inner join two tables together by using equality criteria."})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> LEFT OUTER JOIN <table2> ON <equality criteria> WHERE <search criteria>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Perform a left outer join, returning the left table and everything that matches in the right table."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> UNION SELECT <columns> FROM <table2>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Makes a union by stacking the two tables on top of one another. There must be the same number of columns and order does matter."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> UNION ALL SELECT <columns> FROM <table2>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Makes a union all by stacking the two tables on top of one another. There must be the same number of columns and order does matter. Duplicates will be included."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> INTERSECT SELECT <columns> FROM <table2>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Performs an intersect on two different tables, only returning the rows that match in both tables."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <columns> FROM <table1> EXCEPT SELECT <columns> FROM <table2>;"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Only returns a set of rows that are in the first table and not in the second table."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <column> FROM <table1> WHERE (SELECT <column> FROM <table2> WHERE <>)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"A subquery can be used in a WHERE clause to narrow down the resulting set. Note that it is surrounded by parenthesis."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT <column> FROM <table1>  WHERE <column> IN (SELECT <column> FROM <table2>)"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Using the IN keyword with a subquery can result in a powerful where clause. NOT IN also works too."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT * FROM SALE AS s INNER JOIN (SELECT CarID FROM Car WHERE ModelYear = 2015) AS t ON s.CarID = t.CarID"}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"A subquery can be used to make temporary tables, allowing you to join tables together. Multiple columns can be used and it must have an alias."})]})]})]}),"\n",(0,l.jsx)(n.p,{children:"Why We Make Databases \u201cRelational\u201d:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"In the real world, databases are huge with over 100s of rows."}),"\n",(0,l.jsx)(n.li,{children:"They are called relational databases because the tables are related through attributes."}),"\n",(0,l.jsx)(n.li,{children:"How schema is designed has a tremendous impact on speed and expandability."}),"\n",(0,l.jsxs)(n.li,{children:["Relational Database Benefits:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Maximizing Storage"}),"\n",(0,l.jsx)(n.li,{children:"Better Application Functionality"}),"\n",(0,l.jsx)(n.li,{children:"Cleaner, Richer Data for Business Reporting"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"They organize data to give the numbers and words meaning and context."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Database Normalization:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"There is a great deal of planning when creating the schema for a relational database."}),"\n",(0,l.jsx)(n.li,{children:"The process of this planning is called normalization."}),"\n",(0,l.jsx)(n.li,{children:"The goal is to group things together logically, in a way that is easy to process and shows context for everything."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"How Normalization Helps Us:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Separating data that is heavily duplicated saves space and helps the database move faster."}),"\n",(0,l.jsx)(n.li,{children:"Normalizing the database also helps with making changes. Changes are faster, meaning less can go wrong and other developers will successfully see the changes."}),"\n",(0,l.jsx)(n.li,{children:"Update Anomalies - When the table is being updated and another developer makes a query or change before the update is completed."}),"\n",(0,l.jsx)(n.li,{children:"Normalization drastically reduces the changes of an update anomaly and enforces the data\u2019s integrity."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Set Theory and Relational Databases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You can think of a database table as a set of data stored on a disk."}),"\n",(0,l.jsx)(n.li,{children:"When you query a table, you get the set, or a subset of the data."}),"\n",(0,l.jsxs)(n.li,{children:["Set - A grouping of similar things.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: You can have a set of clothing, and an even more specific set of shirts."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Sets can be visualized as a venn diagram.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This venn diagram visualization also helps with joins."}),"\n",(0,l.jsx)(n.li,{children:"The middle section is called the intersection between sets."}),"\n",(0,l.jsx)(n.li,{children:"The whole venn  diagram is called the Union."}),"\n",(0,l.jsx)(n.li,{children:"Everything but the intersection is called the Except."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"The Union, intersection, or except are called set operations."}),"\n",(0,l.jsx)(n.li,{children:"Normalization allows you to perform set operations efficiently."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Unique Keys:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Relational databases have tables that are linked by column attributes."}),"\n",(0,l.jsx)(n.li,{children:"The attributes are the columns with common data that links data together."}),"\n",(0,l.jsx)(n.li,{children:"These special columns are called keys."}),"\n",(0,l.jsx)(n.li,{children:"Keys can also be used to ensure that each column is distinct. They can also ensure that a certain value doesn\u2019t repeat within a particular column."}),"\n",(0,l.jsxs)(n.li,{children:["Three Primary Types of Keys:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Unique Keys: Columns specifically configured such that no value can be completed within it.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: Social Security Column"}),"\n",(0,l.jsx)(n.li,{children:"They can be null"}),"\n",(0,l.jsx)(n.li,{children:"There can be multiple unique keys per table."}),"\n",(0,l.jsx)(n.li,{children:"They can be modified to new values."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Primary Keys:"}),"\n",(0,l.jsx)(n.li,{children:"Foreign Keys:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Primary key:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Is a unique value."}),"\n",(0,l.jsx)(n.li,{children:"Can never be NULL"}),"\n",(0,l.jsx)(n.li,{children:"Only one primary key is allowed per table."}),"\n",(0,l.jsx)(n.li,{children:"Cannot be modified to a new value."}),"\n",(0,l.jsx)(n.li,{children:"Normally not any useful values. Normally used as IDs (numbers are faster and take less storage then words)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Foreign Keys:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A Foreign Key is a reference or pointer from one table to another.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ex: ProductID is a foreign key in the sales table linking it to the Products table."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["When making a Foreign Key:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The columns must be designed correctly. It should match properly in both tables."}),"\n",(0,l.jsx)(n.li,{children:"A constraint must be made so that the database knows that the two things are linked."}),"\n",(0,l.jsx)(n.li,{children:"A constraint is a rule that a database enforces."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Referential Integrity - Foreign key values must also exist as primary key value in the reference table.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Constraints need to be added to enforce Referential integrity."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"One to Many Relationships:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Three types of relationships between tables:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"One to one"}),"\n",(0,l.jsx)(n.li,{children:"One to many"}),"\n",(0,l.jsx)(n.li,{children:"Many to many"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"One to many relationships are the most common."}),"\n",(0,l.jsx)(n.li,{children:"One row in one table can be linked to many rows in another table. This cannot happen the other way."}),"\n",(0,l.jsx)(n.li,{children:"Foreign keys always goes on the many side."}),"\n",(0,l.jsx)(n.li,{children:"Ex: A sale has 1 product but a product can be on many sales."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Many to Many Relationships:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"One record is linked to many records in another table and vice versa."}),"\n",(0,l.jsx)(n.li,{children:"Ex: Sales and Parts tables. Orders can consist of many parts and many parts can be on many orders."}),"\n",(0,l.jsxs)(n.li,{children:["Which part should have the foreign key? In Many to Many relationships, a third table is required with the primary key from both tables.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This makes a multi-primary key table called a junction table or an associative table."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"A many to many relationship is actually two one to many relationships with a junction table."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"One to One Relationship:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"One row from one table can only link to one row from another table."}),"\n",(0,l.jsx)(n.li,{children:"This relationship is quite rare."}),"\n",(0,l.jsxs)(n.li,{children:["In practice, it is usually better to combine these relationships into one table.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"However, separating used and unused columns can boost performance."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"One to One relationships can also be useful when you are including a third party database."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Modeling Table Relationships:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"There is special softwares that allows you to model the relationships between tables."}),"\n",(0,l.jsx)(n.li,{children:"Tables are seen as entities."}),"\n",(0,l.jsx)(n.li,{children:"The models created are called entity relationship diagrams."}),"\n",(0,l.jsx)(n.li,{children:"One to Many relationships are notated using the crow's foot notation. The \u201ccrows foot\u201d goes on the side where the foreign key will go. Then a line will connect to the one side entity."}),"\n",(0,l.jsx)(n.li,{children:"A one to one relationship connects a line with two perpendicular lines on each side."}),"\n",(0,l.jsx)(n.li,{children:"A many to many relationship has crows feet on both sides. However, in practice, the junction table is included instead with a one to many relationship to each one."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Querying Relational Databases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"There are ways to query multiple tables at the same time. These are called Table Joins."}),"\n",(0,l.jsxs)(n.li,{children:["Two common types of join:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Inner Join"}),"\n",(0,l.jsx)(n.li,{children:"Outer Join"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"The keyword JOIN allows you to join two tables together."}),"\n",(0,l.jsx)(n.li,{children:"Join can be used in any type of relationship."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Inner Join:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Most common kind of SQL join."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> INNER JOIN <table2> ON <equality criteria> WHERE <search criteria>;"}),"\n",(0,l.jsx)(n.li,{children:"The equality criteria will link the information together."}),"\n",(0,l.jsx)(n.li,{children:"You may need to specify which table the column is in if they are named the same thing."}),"\n",(0,l.jsx)(n.li,{children:"You can also alias tables in the form clause using the AS keyword. This is very helpful for long queries."}),"\n",(0,l.jsx)(n.li,{children:"An inner join will return the rows where the values match on both sides."}),"\n",(0,l.jsx)(n.li,{children:"An inner join is an Intersect."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Outer Join:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"As common as inner joins, but are normally used for more complex queries."}),"\n",(0,l.jsx)(n.li,{children:"Outer joins return the middle of the venn diagram and the outsides as well."}),"\n",(0,l.jsxs)(n.li,{children:["Three types of outer joins:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Left Outer Join - Returns all the data on the left and any records from the right that match."}),"\n",(0,l.jsx)(n.li,{children:"Right Outer Join - Returns all the data on the right and any records from the left that match."}),"\n",(0,l.jsx)(n.li,{children:"Full Outer Join - Will match up all records that exist in both tables and then return the remaining unmatched data."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> LEFT OUTER JOIN <table2> ON <equality criteria> WHERE <search criteria>;"}),"\n",(0,l.jsx)(n.li,{children:"The table specified first will be considered the left table."}),"\n",(0,l.jsx)(n.li,{children:"Note: the COUNT() function does not count null values."}),"\n",(0,l.jsx)(n.li,{children:"Different joins can be combined to create more specific queries."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"What are Set Operations?:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You can also join tables together using Set Operations"}),"\n",(0,l.jsx)(n.li,{children:"Set Operations - Combine or limit results using two or more datasets."}),"\n",(0,l.jsxs)(n.li,{children:["Four Set Operations:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Union - Combine data from multiple tables into one table set."}),"\n",(0,l.jsx)(n.li,{children:"Union All - Combine data from multiple rows into one table set including the duplicates."}),"\n",(0,l.jsx)(n.li,{children:"Intersect - Produces a set from values of rows that are in common with the others."}),"\n",(0,l.jsx)(n.li,{children:"Except - Produces a result set of values that exist in the first table but not in the second."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Union Operations:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Unions - combine data from two tables, or sets, into one result set."}),"\n",(0,l.jsx)(n.li,{children:"Similar to an inner join, however, it doesn\u2019t use a foreign key relationship at all. It stacks the data vertically."}),"\n",(0,l.jsx)(n.li,{children:"The columns of the two tables you are joining must match."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> UNION SELECT <columns> FROM <table2>;"}),"\n",(0,l.jsx)(n.li,{children:"The amount of columns and the order they are in does matter, so be careful."}),"\n",(0,l.jsx)(n.li,{children:"You can filter down each portion of the Union statement to narrow the queries down."}),"\n",(0,l.jsx)(n.li,{children:"You can order a query by including it in the second statement."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Union All:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Basically the same as Union, but does not eliminate duplicates."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> UNION ALL SELECT <columns> FROM <table2>;"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Intersect Operations:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Similar to an inner join. Instead of bringing back both rows like a Union, it will only return the rows that match in both tables."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> INTERSECT SELECT <columns> FROM <table2>;"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Except Operations:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Uses the same format as intersect, but only returns the records that are not in the second table."}),"\n",(0,l.jsx)(n.li,{children:"This is very useful when you want something that is in one but not the other."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <columns> FROM <table1> EXCEPT <columns> FROM <table2>;"}),"\n",(0,l.jsx)(n.li,{children:"The order of the tables and the same number of columns are required."}),"\n",(0,l.jsx)(n.li,{children:"The rows need to match exactly to be removed, no matter the number of columns."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"What are Subqueries?:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Subquery - A query that is used in conjunction with another query."}),"\n",(0,l.jsxs)(n.li,{children:["Why use them?","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Criteria for a where clause not specifically known"}),"\n",(0,l.jsx)(n.li,{children:"Need a temporary dataset to join with other tables in your database."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Ex: SELECT <column> FROM <table1> WHERE (SELECT <column> FROM <table2> WHERE <>)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Note how the subquery is inserted into the parentheses."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Using IN with Subqueries to Filter Data:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You can use the IN keyword with a subquery to create a powerful where clause."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT <column> FROM <table1>  WHERE <column> IN (SELECT <column> FROM <table2>)"}),"\n",(0,l.jsx)(n.li,{children:"The subquery can only include one column, or else an error will be thrown."}),"\n",(0,l.jsx)(n.li,{children:"The NOT IN keyword works the same way as well."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Using a SubQuery to Create A Temporary Table:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Derived Table - When a subquery is used to create a temporary table."}),"\n",(0,l.jsx)(n.li,{children:"Very useful when generating reports."}),"\n",(0,l.jsx)(n.li,{children:"Ex: SELECT * FROM SALE AS s INNER JOIN (SELECT CarID FROM Car WHERE ModelYear = 2015) AS t ON s.CarID = t.CarID"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const l={},s=i.createContext(l);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);